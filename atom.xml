<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>iDevv</title>
  
  <subtitle>Dev Life</subtitle>
  <link href="https://idevv.us.kg/atom.xml" rel="self"/>
  
  <link href="https://idevv.us.kg/"/>
  <updated>2025-01-20T03:04:47.261Z</updated>
  <id>https://idevv.us.kg/</id>
  
  <author>
    <name>Ray</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>tailscaled启动报错</title>
    <link href="https://idevv.us.kg/2025/01/20/tailscaled%E5%90%AF%E5%8A%A8%E6%8A%A5%E9%94%99/"/>
    <id>https://idevv.us.kg/2025/01/20/tailscaled%E5%90%AF%E5%8A%A8%E6%8A%A5%E9%94%99/</id>
    <published>2025-01-20T02:25:21.000Z</published>
    <updated>2025-01-20T03:04:47.261Z</updated>
    
    <content type="html"><![CDATA[<p><img data-src="https://images.idevv.us.kg/app/hide.php?key=Z1BXaXBWcEtRT1YxajRXcTB5ZGkxRVNraXAvUHhITmUwdGM9" alt="hide"></p><h1 id="tailscale启动报错-getLocalBackend-error-createEngine-tstun-New-tailscale0-CreateTUN-tailscale0-failed-dev-net-tun-does-not-exist解决"><a href="#tailscale启动报错-getLocalBackend-error-createEngine-tstun-New-tailscale0-CreateTUN-tailscale0-failed-dev-net-tun-does-not-exist解决" class="headerlink" title="tailscale启动报错:getLocalBackend error: createEngine: tstun.New(&quot;tailscale0&quot;): CreateTUN(&quot;tailscale0&quot;) failed; /dev/net/tun does not exist解决"></a>tailscale启动报错:<code>getLocalBackend error: createEngine: tstun.New(&quot;tailscale0&quot;): CreateTUN(&quot;tailscale0&quot;) failed; /dev/net/tun does not exist</code>解决</h1><span id="more"></span><h2 id="在新的服务器上按照官方文档安装好tailscale之后，使用systemctl-start-tailscaled启动后发现报错，原因是无法找到系统的tun设备。"><a href="#在新的服务器上按照官方文档安装好tailscale之后，使用systemctl-start-tailscaled启动后发现报错，原因是无法找到系统的tun设备。" class="headerlink" title="在新的服务器上按照官方文档安装好tailscale之后，使用systemctl start tailscaled启动后发现报错，原因是无法找到系统的tun设备。"></a>在新的服务器上按照官方文档安装好tailscale之后，使用<code>systemctl start tailscaled</code>启动后发现报错，原因是无法找到系统的tun设备。</h2><blockquote><p>经过查询相关资料得知需要使用tailscale的用户网络空间来解决,<br>您可以通过使用 Tailscale 的用户空间网络模式来解决此问题，该模式专门为 &#x2F;dev&#x2F;net&#x2F;tun 不可用的环境设计。此功能在 Tailscale v1.12 及更高版本中可用</p></blockquote><h2 id="具体解决办法如下："><a href="#具体解决办法如下：" class="headerlink" title="具体解决办法如下："></a>具体解决办法如下：</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">vim /lib/systemd/system/tailscaled.service</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">在tailscaled后面增加--tun=userspace-networking</span></span><br><span class="line">[Unit]</span><br><span class="line">Description=Tailscale node agent</span><br><span class="line">Documentation=https://tailscale.com/kb/</span><br><span class="line">Wants=network-pre.target</span><br><span class="line">After=network-pre.target NetworkManager.service systemd-resolved.service</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">EnvironmentFile=/etc/default/tailscaled</span><br><span class="line">ExecStart=/usr/sbin/tailscaled --tun=userspace-networking --state=/var/lib/tailscale/tailscaled.state --socket=/run/tailscale/tailscaled.sock --port=$&#123;PORT&#125; $FLAGS</span><br><span class="line">ExecStopPost=/usr/sbin/tailscaled --cleanup</span><br><span class="line"></span><br><span class="line">Restart=on-failure</span><br><span class="line"></span><br><span class="line">RuntimeDirectory=tailscale</span><br><span class="line">RuntimeDirectoryMode=0755</span><br><span class="line">StateDirectory=tailscale</span><br><span class="line">StateDirectoryMode=0700</span><br><span class="line">CacheDirectory=tailscale</span><br><span class="line">CacheDirectoryMode=0750</span><br><span class="line">Type=notify</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure><p><img data-src="https://images.idevv.us.kg/app/hide.php?key=eVpYVnJLZGRKbzc0cVV2MEo2Zk1udkt3ckdtcjFLL1J5ZFk9" alt="hide"></p><h2 id="启动systemctl-daemon-reload-systemctl-restart-tailscaled"><a href="#启动systemctl-daemon-reload-systemctl-restart-tailscaled" class="headerlink" title="启动systemctl daemon-reload; systemctl restart tailscaled"></a>启动<code>systemctl daemon-reload; systemctl restart tailscaled</code></h2><p><img data-src="https://images.idevv.us.kg/app/hide.php?key=UHIzZmNqd0twZGhzSmdLQmwrTFZRcWUzU0RIRHRUSVg4dFk9" alt="hide"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img data-src=&quot;https://images.idevv.us.kg/app/hide.php?key=Z1BXaXBWcEtRT1YxajRXcTB5ZGkxRVNraXAvUHhITmUwdGM9&quot; alt=&quot;hide&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;tailscale启动报错-getLocalBackend-error-createEngine-tstun-New-tailscale0-CreateTUN-tailscale0-failed-dev-net-tun-does-not-exist解决&quot;&gt;&lt;a href=&quot;#tailscale启动报错-getLocalBackend-error-createEngine-tstun-New-tailscale0-CreateTUN-tailscale0-failed-dev-net-tun-does-not-exist解决&quot; class=&quot;headerlink&quot; title=&quot;tailscale启动报错:getLocalBackend error: createEngine: tstun.New(&amp;quot;tailscale0&amp;quot;): CreateTUN(&amp;quot;tailscale0&amp;quot;) failed; /dev/net/tun does not exist解决&quot;&gt;&lt;/a&gt;tailscale启动报错:&lt;code&gt;getLocalBackend error: createEngine: tstun.New(&amp;quot;tailscale0&amp;quot;): CreateTUN(&amp;quot;tailscale0&amp;quot;) failed; /dev/net/tun does not exist&lt;/code&gt;解决&lt;/h1&gt;</summary>
    
    
    
    <category term="运维" scheme="https://idevv.us.kg/categories/%E8%BF%90%E7%BB%B4/"/>
    
    
    <category term="linux" scheme="https://idevv.us.kg/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>tcpdump抓包工具常用命令</title>
    <link href="https://idevv.us.kg/2025/01/10/tcpdump%E6%8A%93%E5%8C%85%E5%B7%A5%E5%85%B7%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <id>https://idevv.us.kg/2025/01/10/tcpdump%E6%8A%93%E5%8C%85%E5%B7%A5%E5%85%B7%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</id>
    <published>2025-01-10T01:24:48.000Z</published>
    <updated>2025-01-10T01:57:48.440Z</updated>
    
    <content type="html"><![CDATA[<p><img data-src="https://images.idevv.us.kg/app/hide.php?key=eEF2WFlYSHNrYkV0aWRlMkU3QWJ5YW53bEltbkoxL0JRRHVK"><br>整理了一些<code>tcpdump</code>使用示例，留做备份记录,</p><span id="more"></span><ul><li><a href="https://mp.weixin.qq.com/s/YYIiXIgkdbp4bEHcs7Nk2w">内容来源</a></li></ul><h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><h3 id="常用参数"><a href="#常用参数" class="headerlink" title="常用参数"></a>常用参数</h3><p>下面的命令是使用<code>tcpdump</code>时常见的参数。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tcpdump -i eth0 -nn -s0 -v port 80</span><br></pre></td></tr></table></figure><ul><li><strong>-i</strong>: 指定需要进行抓包的接口，一般是以太网卡或者无线网卡，也可以指定其他的虚拟接口，比如docker网桥<br>如果只有一个网络适配器，则可以不用指定也行。</li><li><strong>-nn</strong>: 单个n不会解析主机名，两个nn不会解析主机名或端口。<br>这不仅对于查看 IP&#x2F;端口号很方便，而且在抓包大量数据时也很方便，因为名称解析会减慢抓包速度。</li><li><strong>-s0</strong>: 抓包大小，-s0将大小设置为无限制。<br>如果您想抓包所有流量，或者从网络流量中提取二进制文件&#x2F;文件，则需要此选项。</li><li><strong>-v</strong>: 详细，使用 (-v) 或 (-vv) 会增加输出中显示更详细信息，通常会显示更多协议特定的信息。</li><li><strong>port 80</strong>: 端口过滤器，这里设置的是抓包端口 80 上的流量。</li></ul><h3 id="显示ASCII文本"><a href="#显示ASCII文本" class="headerlink" title="显示ASCII文本"></a>显示ASCII文本</h3><p><code>-A</code>参数使得输出中包含抓包的<code>ascii</code>字符串。这样便于结合<code>grep</code>或其他命令解析输出。另一个可以同时显示十六进制输出和<code>ascii</code>的参数是<code>-X</code>。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tcpdump -A -s0 port 80</span><br></pre></td></tr></table></figure><p>根据协议抓包<br>比如，过滤<code>UDP</code>流量，可以指定<code>udp</code>，也可以指定使用协议<code>17</code>，这两个命令效果一样。<br><code>TCP</code>对应的协议是<code>6</code>。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tcpdump -i eth0 udp</span><br><span class="line">tcpdump -i eth0 proto 17</span><br></pre></td></tr></table></figure><p>根据IP抓包<br>使用<code>host</code>过滤器将同时抓包前往（目标）和来自（源）IP 地址的流量。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tcpdump -i eth0 host 10.10.1.1</span><br></pre></td></tr></table></figure><p>或者使用<code>src</code>或者<code>dst</code>来指定仅抓包单向的流量。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tcpdump -i eth0 src 10.10.1.20</span><br><span class="line">tcpdump -i eth0 dst 10.10.1.20</span><br></pre></td></tr></table></figure><p>抓包内容写入文件<br>将抓包文件写入磁盘，保存的文件后续可以使用其它工具进行分析，比如Wireshark。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tcpdump -i eth0 -s0 -v test.pcap</span><br></pre></td></tr></table></figure><p>行缓冲模式<br>指定缓冲模式，比如行缓冲（<code>-l</code>）或数据包缓冲（<code>-C</code>），可以让<code>tcpdump</code>的输出立即发送到管道命令，在故障排除时立即做出响应。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tcpdump -i eth0 -s0 -l port 80 | grep &#x27;Server:&#x27;</span><br></pre></td></tr></table></figure><p>不指定缓冲模式，有可能会得不到预期的结果。<br>组合过滤器<br>在上面的示例中，可以使用使用下面的<code>逻辑符号</code>来组合不同的过滤器。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">and or &amp;&amp;</span><br><span class="line">or or ||</span><br><span class="line">not or !</span><br></pre></td></tr></table></figure><h1 id="使用示例"><a href="#使用示例" class="headerlink" title="使用示例"></a>使用示例</h1><p><code>Tcpdump</code>命令参数很多，常常有多种方法可以实现同样的结果。<br>使用哪种方法取决于所需的输出以及线路上的流量。比如，在繁忙的千兆位链路上进行抓包可能会迫使您使用特定的低级数据包过滤器。</p><p>下面的示例中，将列举一些以最简单（因此最快）的方式获得结果的方法。</p><h2 id="提取-HTTP-用户代理"><a href="#提取-HTTP-用户代理" class="headerlink" title="提取 HTTP 用户代理"></a>提取 HTTP 用户代理</h2><p>从 HTTP 请求标头中提取 HTTP 用户代理。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo tcpdump -nn -A -s1500 -l | grep &quot;User-Agent:&quot;</span><br></pre></td></tr></table></figure><p>通过使用 <code>egrep</code> 和多个匹配规则，可以从请求中获取用户代理和主机（或任何其他标头）。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo tcpdump -nn -A -s1500 -l | egrep -i &#x27;User-Agent:|Host:&#x27;</span><br></pre></td></tr></table></figure><h2 id="仅捕获-HTTP-GET-和-POST-数据包"><a href="#仅捕获-HTTP-GET-和-POST-数据包" class="headerlink" title="仅捕获 HTTP GET 和 POST 数据包"></a>仅捕获 HTTP GET 和 POST 数据包</h2><p>仅指定与 <code>GET</code> 匹配的数据包。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo tcpdump -s 0 -A -vv &#x27;tcp[((tcp[12:1] &amp; 0xf0) &gt;&gt; 2):4] = 0x47455420&#x27;</span><br></pre></td></tr></table></figure><p>只选择 <code>POST</code> 请求。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo tcpdump -s 0 -A -vv &#x27;tcp[((tcp[12:1] &amp; 0xf0) &gt;&gt; 2):4] = 0x504f5354&#x27;</span><br></pre></td></tr></table></figure><p><strong>注意</strong>，使用此过滤器抓包的数据中可能不包含 <strong>POST 数据</strong>，因为<code>POST</code> 请求很可能会被拆分为多个 <code>TCP</code> 数据包。</p><p>上面的表达式中的十六进制是与 <code>GET</code> 和 <code>POST</code> 请求中的 <code>ascii</code> 对应的。</p><h2 id="提取-HTTP-请求的-URL"><a href="#提取-HTTP-请求的-URL" class="headerlink" title="提取 HTTP 请求的 URL"></a>提取 HTTP 请求的 URL</h2><p>从流量中解析主机和 <code>HTTP</code> 请求位置。<br>如果服务不在<strong>80 端口</strong>，则需要指定端口。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ sudo tcpdump -s 0 -v -n -l | egrep -i &quot;POST /|GET /|Host:&quot;</span><br><span class="line"></span><br><span class="line">tcpdump: listening on enp7s0, link-type EN10MB (Ethernet), capture size 262144 bytes</span><br><span class="line">POST /wp-login.php HTTP/1.1</span><br><span class="line">Host: dev.example.com</span><br><span class="line">GET /wp-login.php HTTP/1.1</span><br><span class="line">Host: dev.example.com</span><br><span class="line">GET /favicon.ico HTTP/1.1</span><br><span class="line">Host: dev.example.com</span><br><span class="line">GET / HTTP/1.1</span><br><span class="line">Host: dev.example.com</span><br></pre></td></tr></table></figure><h2 id="在-POST-请求中提取-HTTP-密码"><a href="#在-POST-请求中提取-HTTP-密码" class="headerlink" title="在 POST 请求中提取 HTTP 密码"></a>在 POST 请求中提取 HTTP 密码</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ sudo tcpdump -s 0 -A -n -l | egrep -i &quot;POST /|pwd=|passwd=|password=|Host:&quot;</span><br><span class="line"></span><br><span class="line">tcpdump: verbose output suppressed, use -v or -vv for full protocol decode</span><br><span class="line">listening on enp7s0, link-type EN10MB (Ethernet), capture size 262144 bytes</span><br><span class="line">11:25:54.799014 IP 10.10.1.30.39224 &gt; 10.10.1.125.80: Flags [P.], seq 1458768667:1458770008, ack 2440130792, win 704, options [nop,nop,TS val 461552632 ecr 208900561], length 1341: HTTP: POST /wp-login.php HTTP/1.1</span><br><span class="line">.....s..POST /wp-login.php HTTP/1.1</span><br><span class="line">Host: dev.example.com</span><br><span class="line">.....s..log=admin&amp;pwd=notmypassword&amp;wp-submit=Log+In&amp;redirect_to=http%3A%2F%2Fdev.example.com%2Fwp-admin%2F&amp;testcookie=1</span><br></pre></td></tr></table></figure><h2 id="从服务器和客户端抓包-Cookie"><a href="#从服务器和客户端抓包-Cookie" class="headerlink" title="从服务器和客户端抓包 Cookie"></a>从服务器和客户端抓包 Cookie</h2><p>通过搜索 <code>Set-Cookie</code>（来自服务器）和 <code>Cookie</code>（来自客户端）来抓包 <code>cookie</code>。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ sudo tcpdump -nn -A -s0 -l | egrep -i &#x27;Set-Cookie|Host:|Cookie:&#x27;</span><br><span class="line"></span><br><span class="line">tcpdump: verbose output suppressed, use -v or -vv for full protocol decode</span><br><span class="line">listening on wlp58s0, link-type EN10MB (Ethernet), capture size 262144 bytes</span><br><span class="line">Host: dev.example.com</span><br><span class="line">Cookie: wordpress_86be02xxxxxxxxxxxxxxxxxxxc43=admin%7C152xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxfb3e15c744fdd6; _ga=GA1.2.21343434343421934; _gid=GA1.2.927343434349426; wordpress_test_cookie=WP+Cookie+check; wordpress_logged_in_86be654654645645645654645653fc43=admin%7C15275102testtesttesttestab7a61e; wp-settings-time-1=1527337439</span><br></pre></td></tr></table></figure><h2 id="抓包所有-ICMP-数据包"><a href="#抓包所有-ICMP-数据包" class="headerlink" title="抓包所有 ICMP 数据包"></a>抓包所有 ICMP 数据包</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ sudo tcpdump -n icmp</span><br><span class="line"></span><br><span class="line">tcpdump: verbose output suppressed, use -v or -vv for full protocol decode</span><br><span class="line">listening on enp7s0, link-type EN10MB (Ethernet), capture size 262144 bytes</span><br><span class="line">11:34:21.590380 IP 10.10.1.217 &gt; 10.10.1.30: ICMP echo request, id 27948, seq 1, length 64</span><br><span class="line">11:34:21.590434 IP 10.10.1.30 &gt; 10.10.1.217: ICMP echo reply, id 27948, seq 1, length 64</span><br><span class="line">11:34:27.680307 IP 10.10.1.159 &gt; 10.10.1.1: ICMP 10.10.1.189 udp port 59619 unreachable, length 115</span><br></pre></td></tr></table></figure><h2 id="非-ECHO-REPLY-的-ICMP-数据包"><a href="#非-ECHO-REPLY-的-ICMP-数据包" class="headerlink" title="非 ECHO&#x2F;REPLY 的 ICMP 数据包"></a>非 ECHO&#x2F;REPLY 的 ICMP 数据包</h2><p>对 <code>icmp</code> 类型进行过滤，以选择非标准 <code>ping</code> 包的 <code>icmp</code> 包。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ sudo tcpdump &#x27;icmp[icmptype] != icmp-echo and icmp[icmptype] != icmp-echoreply&#x27;</span><br><span class="line"></span><br><span class="line">tcpdump: verbose output suppressed, use -v or -vv for full protocol decode</span><br><span class="line">listening on enp7s0, link-type EN10MB (Ethernet), capture size 262144 bytes</span><br><span class="line">11:37:04.041037 IP 10.10.1.189 &gt; 10.10.1.20: ICMP 10.10.1.189 udp port 36078 unreachable, length 156</span><br></pre></td></tr></table></figure><h2 id="抓包-SMTP-POP3-电子邮件"><a href="#抓包-SMTP-POP3-电子邮件" class="headerlink" title="抓包 SMTP&#x2F;POP3 电子邮件"></a>抓包 SMTP&#x2F;POP3 电子邮件</h2><p>可以提取电子邮件<strong>正文</strong>和<strong>其他数据</strong>，下面的例子中仅解析电子邮件<strong>收件人</strong>。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo tcpdump -nn -l port 25 | grep -i &#x27;MAIL FROM\|RCPT TO&#x27;</span><br></pre></td></tr></table></figure><h2 id="NTP-的查询和响应的故障排除"><a href="#NTP-的查询和响应的故障排除" class="headerlink" title="NTP 的查询和响应的故障排除"></a>NTP 的查询和响应的故障排除</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ sudo tcpdump dst port 123</span><br><span class="line"></span><br><span class="line">tcpdump: verbose output suppressed, use -v or -vv for full protocol decode</span><br><span class="line">listening on eth0, link-type EN10MB (Ethernet), capture size 65535 bytes</span><br><span class="line">21:02:19.112502 IP test33.ntp &gt; 199.30.140.74.ntp: NTPv4, Client, length 48</span><br><span class="line">21:02:19.113888 IP 216.239.35.0.ntp &gt; test33.ntp: NTPv4, Server, length 48</span><br><span class="line">21:02:20.150347 IP test33.ntp &gt; 216.239.35.0.ntp: NTPv4, Client, length 48</span><br><span class="line">21:02:20.150991 IP 216.239.35.0.ntp &gt; test33.ntp: NTPv4, Server, length 48</span><br></pre></td></tr></table></figure><h2 id="抓包-SNMP-的查询和响应"><a href="#抓包-SNMP-的查询和响应" class="headerlink" title="抓包 SNMP 的查询和响应"></a>抓包 SNMP 的查询和响应</h2><p>使用 <code>onesixtyone</code> 快速 <code>SNMP</code> 协议扫描器，然后在本地网络上测试 <code>SNMP</code> 服务并捕获 <code>GetRequest</code> 和 <code>GetResponse</code> 。</p><p>模拟<code>SNMP</code>扫描：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ onesixtyone 10.10.1.10 public</span><br><span class="line"></span><br><span class="line">Scanning 1 hosts, 1 communities</span><br><span class="line">10.10.1.10 [public] Linux test33 4.15.0-20-generic #21-Ubuntu SMP Tue Apr 24 06:16:15 UTC 2018 x86_64</span><br></pre></td></tr></table></figure><p>抓包<code>SNMP</code>查询和扫描：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ sudo tcpdump -n -s0  port 161 and udp</span><br><span class="line"></span><br><span class="line">tcpdump: verbose output suppressed, use -v or -vv for full protocol decode</span><br><span class="line">listening on wlp58s0, link-type EN10MB (Ethernet), capture size 262144 bytes</span><br><span class="line">23:39:13.725522 IP 10.10.1.159.36826 &gt; 10.10.1.20.161:  GetRequest(28)  .1.3.6.1.2.1.1.1.0</span><br><span class="line">23:39:13.728789 IP 10.10.1.20.161 &gt; 10.10.1.159.36826:  GetResponse(109)  .1.3.6.1.2.1.1.1.0=&quot;Linux testmachine 4.15.0-20-generic #21-Ubuntu SMP Tue Apr 24 06:16:15 UTC 2018 x86_64&quot;</span><br></pre></td></tr></table></figure><h2 id="抓包-FTP-的凭证和命令"><a href="#抓包-FTP-的凭证和命令" class="headerlink" title="抓包 FTP 的凭证和命令"></a>抓包 FTP 的凭证和命令</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo tcpdump -nn -v port ftp or ftp-data</span><br></pre></td></tr></table></figure><h2 id="滚动抓包文件"><a href="#滚动抓包文件" class="headerlink" title="滚动抓包文件"></a>滚动抓包文件</h2><p>针对大流量或长时间抓包时，自动创建固定大小的新文件会很有帮助，一般使用参数 <code>-W</code>、 <code>-G</code>和 <code>-C</code> 来完成。</p><p>下面的示例中，文件 <code>capture-(hour).pcap</code> 将每 (-G) <code>3600</code> 秒（1 小时）创建一次，这些文件将在第二天被覆盖。<br>因此，最终应该得到 <code>capture-&#123;1-24&#125;.pcap</code>，如果小时为 <code>15</code>，则新文件为 (<code>/tmp/capture-15.pcap</code>)。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ tcpdump  -w /tmp/capture-%H.pcap -G 3600 -C 200</span><br></pre></td></tr></table></figure><h2 id="抓包-IPv6-流量"><a href="#抓包-IPv6-流量" class="headerlink" title="抓包 IPv6 流量"></a>抓包 IPv6 流量</h2><p>使用 <code>ip6</code> 过滤器捕获 <code>IPv6</code> 流量。<br>可以使用 <code>proto 6</code> 或 <code>proto 17</code> 指定了 <code>TCP</code>或<code>UDP</code> 协议。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tcpdump -nn ip6 proto 6</span><br></pre></td></tr></table></figure><p>从先前保存的抓包文件中读取<code>UDP</code> 的 <code>IPv6</code> 流量。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tcpdump -nr ipv6-test.pcap ip6 proto 17</span><br></pre></td></tr></table></figure><h2 id="检测网络流量中的端口扫描"><a href="#检测网络流量中的端口扫描" class="headerlink" title="检测网络流量中的端口扫描"></a>检测网络流量中的端口扫描</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">$ tcpdump -nn</span><br><span class="line"></span><br><span class="line">21:46:19.693601 IP 10.10.1.10.60460 &gt; 10.10.1.199.5432: Flags [S], seq 116466344, win 29200, options [mss 1460,sackOK,TS val 3547090332 ecr 0,nop,wscale 7], length 0</span><br><span class="line">21:46:19.693626 IP 10.10.1.10.35470 &gt; 10.10.1.199.513: Flags [S], seq 3400074709, win 29200, options [mss 1460,sackOK,TS val 3547090332 ecr 0,nop,wscale 7], length 0</span><br><span class="line">21:46:19.693762 IP 10.10.1.10.44244 &gt; 10.10.1.199.389: Flags [S], seq 2214070267, win 29200, options [mss 1460,sackOK,TS val 3547090333 ecr 0,nop,wscale 7], length 0</span><br><span class="line">21:46:19.693772 IP 10.10.1.199.389 &gt; 10.10.1.10.44244: Flags [R.], seq 0, ack 2214070268, win 0, length 0</span><br><span class="line">21:46:19.693783 IP 10.10.1.10.35172 &gt; 10.10.1.199.1433: Flags [S], seq 2358257571, win 29200, options [mss 1460,sackOK,TS val 3547090333 ecr 0,nop,wscale 7], length 0</span><br><span class="line">21:46:19.693826 IP 10.10.1.10.33022 &gt; 10.10.1.199.49153: Flags [S], seq 2406028551, win 29200, options [mss 1460,sackOK,TS val 3547090333 ecr 0,nop,wscale 7], length 0</span><br><span class="line">21:46:19.695567 IP 10.10.1.10.55130 &gt; 10.10.1.199.49154: Flags [S], seq 3230403372, win 29200, options [mss 1460,sackOK,TS val 3547090334 ecr 0,nop,wscale 7], length 0</span><br><span class="line">21:46:19.695590 IP 10.10.1.199.49154 &gt; 10.10.1.10.55130: Flags [R.], seq 0, ack 3230403373, win 0, length 0</span><br><span class="line">21:46:19.695608 IP 10.10.1.10.33460 &gt; 10.10.1.199.49152: Flags [S], seq 3289070068, win 29200, options [mss 1460,sackOK,TS val 3547090335 ecr 0,nop,wscale 7], length 0</span><br><span class="line">21:46:19.695622 IP 10.10.1.199.49152 &gt; 10.10.1.10.33460: Flags [R.], seq 0, ack 3289070069, win 0, length 0</span><br><span class="line">21:46:19.695637 IP 10.10.1.10.34940 &gt; 10.10.1.199.1029: Flags [S], seq 140319147, win 29200, options [mss 1460,sackOK,TS val 3547090335 ecr 0,nop,wscale 7], length 0</span><br><span class="line">21:46:19.695650 IP 10.10.1.199.1029 &gt; 10.10.1.10.34940: Flags [R.], seq 0, ack 140319148, win 0, length 0</span><br><span class="line">21:46:19.695664 IP 10.10.1.10.45648 &gt; 10.10.1.199.5060: Flags [S], seq 2203629201, win 29200, options [mss 1460,sackOK,TS val 3547090335 ecr 0,nop,wscale 7], length 0</span><br><span class="line">21:46:19.695775 IP 10.10.1.10.49028 &gt; 10.10.1.199.2000: Flags [S], seq 635990431, win 29200, options [mss 1460,sackOK,TS val 3547090335 ecr 0,nop,wscale 7], length 0</span><br><span class="line">21:46:19.695790 IP 10.10.1.199.2000 &gt; 10.10.1.10.49028: Flags [R.], seq 0, ack 635990432, win 0, length 0</span><br></pre></td></tr></table></figure><h2 id="显示-Nmap-NSE-脚本测试的示例过滤器"><a href="#显示-Nmap-NSE-脚本测试的示例过滤器" class="headerlink" title="显示 Nmap NSE 脚本测试的示例过滤器"></a>显示 Nmap NSE 脚本测试的示例过滤器</h2><p>在 <code>Nmap</code> 机器上模拟<code>NSE</code>脚本：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ nmap -p 80 --script=http-enum.nse targetip</span><br></pre></td></tr></table></figure><p>在目标机器上抓包：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ tcpdump -nn port 80 | grep &quot;GET /&quot;</span><br><span class="line"></span><br><span class="line">GET /w3perl/ HTTP/1.1</span><br><span class="line">GET /w-agora/ HTTP/1.1</span><br><span class="line">GET /way-board/ HTTP/1.1</span><br><span class="line">GET /web800fo/ HTTP/1.1</span><br><span class="line">GET /webaccess/ HTTP/1.1</span><br><span class="line">GET /webadmin/ HTTP/1.1</span><br><span class="line">GET /webAdmin/ HTTP/1.1</span><br></pre></td></tr></table></figure><h2 id="抓包非本地主机上的开始和结束的数据包"><a href="#抓包非本地主机上的开始和结束的数据包" class="headerlink" title="抓包非本地主机上的开始和结束的数据包"></a>抓包非本地主机上的开始和结束的数据包</h2><p>通过选择 <code>tcp-syn</code> 和 <code>tcp-fin</code> 数据包，可以显示每个已建立的 TCP 会话，其中包含时间戳，但不包含数据。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ tcpdump &#x27;tcp[tcpflags] &amp; (tcp-syn|tcp-fin) != 0 and not src and dst net localnet&#x27;</span><br></pre></td></tr></table></figure><h2 id="抓包-DNS-请求和响应"><a href="#抓包-DNS-请求和响应" class="headerlink" title="抓包 DNS 请求和响应"></a>抓包 DNS 请求和响应</h2><p>比如下面的示例中可以看到对 <code>Google</code> 公共 <code>DNS</code> 的出站 <code>DNS</code> 请求和 <strong>A 记录</strong>（IP 地址）响应。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ sudo tcpdump -i wlp58s0 -s0 port 53</span><br><span class="line"></span><br><span class="line">tcpdump: verbose output suppressed, use -v or -vv for full protocol decode</span><br><span class="line">listening on wlp58s0, link-type EN10MB (Ethernet), capture size 262144 bytes</span><br><span class="line">14:19:06.879799 IP test.53852 &gt; google-public-dns-a.google.com.domain: 26977+ [1au] A? play.google.com. (44)</span><br><span class="line">14:19:07.022618 IP google-public-dns-a.google.com.domain &gt; test.53852: 26977 1/0/1 A 216.58.203.110 (60)</span><br></pre></td></tr></table></figure><h2 id="抓包-HTTP-数据包"><a href="#抓包-HTTP-数据包" class="headerlink" title="抓包 HTTP 数据包"></a>抓包 HTTP 数据包</h2><p>仅抓包<strong>端口 80</strong> 上的 HTTP 流量，避免抓包 <code>TCP</code> 会话 (<code>SYN / FIN / ACK</code>)。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ tcpdump &#x27;tcp port 80 and (((ip[2:2] - ((ip[0]&amp;0xf)&lt;&lt;2)) - ((tcp[12]&amp;0xf0)&gt;&gt;2)) != 0)&#x27;</span><br></pre></td></tr></table></figure><h2 id="在-tcpdump-中抓包，在-Wireshark-中查看"><a href="#在-tcpdump-中抓包，在-Wireshark-中查看" class="headerlink" title="在 tcpdump 中抓包，在 Wireshark 中查看"></a>在 tcpdump 中抓包，在 Wireshark 中查看</h2><p>一般方法是通过<code>tcpdump</code>抓包之后保存成文件，再将文件拷贝到<code>Wireshark</code>中查看。<br>不过，除此之外，还可以通过 <code>SSH</code> 连接将抓包的内容实时提供给 <code>Wireshark</code>。<br>不要忘记 <code>not port 22</code> ，加上这个就不会捕获 <code>SSH</code> 流量了。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh root@remotesystem &#x27;tcpdump -s0 -c 1000 -nn -w - not port 22&#x27; | wireshark -k -i -</span><br></pre></td></tr></table></figure><h2 id="按数据包数量排名主机"><a href="#按数据包数量排名主机" class="headerlink" title="按数据包数量排名主机"></a>按数据包数量排名主机</h2><p>列出一段时间内或数据包数量最多的通话者。<br>使用简单的命令行字段提取来获取 <strong>IP 地址</strong>，对出现的次数进行排序和计数。<br>用于排序和计数的流量与计数参数 <code>-c</code>相关。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ sudo tcpdump -nnn -t -c 200 | cut -f 1,2,3,4 -d &#x27;.&#x27; | sort | uniq -c | sort -nr | head -n 20</span><br><span class="line"></span><br><span class="line">tcpdump: verbose output suppressed, use -v or -vv for full protocol decode</span><br><span class="line">listening on enp7s0, link-type EN10MB (Ethernet), capture size 262144 bytes</span><br><span class="line">200 packets captured</span><br><span class="line">261 packets received by filter</span><br><span class="line">0 packets dropped by kernel</span><br><span class="line">    108 IP 10.10.211.181</span><br><span class="line">     91 IP 10.10.1.30</span><br><span class="line">      1 IP 10.10.1.50</span><br></pre></td></tr></table></figure><h2 id="抓包-所有明文密码"><a href="#抓包-所有明文密码" class="headerlink" title="抓包 所有明文密码"></a>抓包 所有明文密码</h2><p>下面的示例中，重点关注标准纯文本协议，并选择 <code>grep</code> 处理任何与用户或密码相关的内容。<br>通过 <code>grep</code> 的 <code>-B5</code> 选项，只获取前 5 行（可以提供有关的密码的上下文、主机名、IP 地址、系统）。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo tcpdump port http or port ftp or port smtp or port imap or port pop3 or port telnet -l -A | egrep -i -B5 &#x27;pass=|pwd=|log=|login=|user=|username=|pw=|passw=|passwd=|password=|pass:|user:|username:|password:|login:|pass |user &#x27;</span><br></pre></td></tr></table></figure><h2 id="DHCP-示例"><a href="#DHCP-示例" class="headerlink" title="DHCP 示例"></a>DHCP 示例</h2><p>监视 <code>DHCP</code> 请求和回复， <code>DHCP</code> 请求在端口 <code>67</code> 上显示，回复在端口 <code>68</code> 上显示。<br>使用参数 -v 可以查看协议选项和其他详细信息。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">$ sudo tcpdump -v -n port 67 or 68</span><br><span class="line"></span><br><span class="line">tcpdump: listening on enp7s0, link-type EN10MB (Ethernet), capture size 262144 bytes</span><br><span class="line">14:37:50.059662 IP (tos 0x10, ttl 128, id 0, offset 0, flags [none], proto UDP (17), length 328)</span><br><span class="line">    0.0.0.0.68 &gt; 255.255.255.255.67: BOOTP/DHCP, Request from 00:0c:xx:xx:xx:d5, length 300, xid 0xc9779c2a, Flags [none]</span><br><span class="line">  Client-Ethernet-Address 00:0c:xx:xx:xx:d5</span><br><span class="line">  Vendor-rfc1048 Extensions</span><br><span class="line">    Magic Cookie 0x63825363</span><br><span class="line">    DHCP-Message Option 53, length 1: Request</span><br><span class="line">    Requested-IP Option 50, length 4: 10.10.1.163</span><br><span class="line">    Hostname Option 12, length 14: &quot;test-ubuntu&quot;</span><br><span class="line">    Parameter-Request Option 55, length 16:</span><br><span class="line">      Subnet-Mask, BR, Time-Zone, Default-Gateway</span><br><span class="line">      Domain-Name, Domain-Name-Server, Option 119, Hostname</span><br><span class="line">      Netbios-Name-Server, Netbios-Scope, MTU, Classless-Static-Route</span><br><span class="line">      NTP, Classless-Static-Route-Microsoft, Static-Route, Option 252</span><br><span class="line">14:37:50.059667 IP (tos 0x10, ttl 128, id 0, offset 0, flags [none], proto UDP (17), length 328)</span><br><span class="line">    0.0.0.0.68 &gt; 255.255.255.255.67: BOOTP/DHCP, Request from 00:0c:xx:xx:xx:d5, length 300, xid 0xc9779c2a, Flags [none]</span><br><span class="line">  Client-Ethernet-Address 00:0c:xx:xx:xx:d5</span><br><span class="line">  Vendor-rfc1048 Extensions</span><br><span class="line">    Magic Cookie 0x63825363</span><br><span class="line">    DHCP-Message Option 53, length 1: Request</span><br><span class="line">    Requested-IP Option 50, length 4: 10.10.1.163</span><br><span class="line">    Hostname Option 12, length 14: &quot;test-ubuntu&quot;</span><br><span class="line">    Parameter-Request Option 55, length 16:</span><br><span class="line">      Subnet-Mask, BR, Time-Zone, Default-Gateway</span><br><span class="line">      Domain-Name, Domain-Name-Server, Option 119, Hostname</span><br><span class="line">      Netbios-Name-Server, Netbios-Scope, MTU, Classless-Static-Route</span><br><span class="line">      NTP, Classless-Static-Route-Microsoft, Static-Route, Option 252</span><br><span class="line">14:37:50.060780 IP (tos 0x0, ttl 64, id 53564, offset 0, flags [none], proto UDP (17), length 339)</span><br><span class="line">    10.10.1.1.67 &gt; 10.10.1.163.68: BOOTP/DHCP, Reply, length 311, xid 0xc9779c2a, Flags [none]</span><br><span class="line">  Your-IP 10.10.1.163</span><br><span class="line">  Server-IP 10.10.1.1</span><br><span class="line">  Client-Ethernet-Address 00:0c:xx:xx:xx:d5</span><br><span class="line">  Vendor-rfc1048 Extensions</span><br><span class="line">    Magic Cookie 0x63825363</span><br><span class="line">    DHCP-Message Option 53, length 1: ACK</span><br><span class="line">    Server-ID Option 54, length 4: 10.10.1.1</span><br><span class="line">    Lease-Time Option 51, length 4: 86400</span><br><span class="line">    RN Option 58, length 4: 43200</span><br><span class="line">    RB Option 59, length 4: 75600</span><br><span class="line">    Subnet-Mask Option 1, length 4: 255.255.255.0</span><br><span class="line">    BR Option 28, length 4: 10.10.1.255</span><br><span class="line">    Domain-Name-Server Option 6, length 4: 10.10.1.1</span><br><span class="line">    Hostname Option 12, length 14: &quot;test-ubuntu&quot;</span><br><span class="line">    T252 Option 252, length 1: 10    Default-Gatewa</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img data-src=&quot;https://images.idevv.us.kg/app/hide.php?key=eEF2WFlYSHNrYkV0aWRlMkU3QWJ5YW53bEltbkoxL0JRRHVK&quot;&gt;&lt;br&gt;整理了一些&lt;code&gt;tcpdump&lt;/code&gt;使用示例，留做备份记录,&lt;/p&gt;</summary>
    
    
    
    <category term="运维" scheme="https://idevv.us.kg/categories/%E8%BF%90%E7%BB%B4/"/>
    
    
    <category term="linux" scheme="https://idevv.us.kg/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>hexo增加utterances评论系统</title>
    <link href="https://idevv.us.kg/2025/01/09/hexo%E5%A2%9E%E5%8A%A0utteranc%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9F/"/>
    <id>https://idevv.us.kg/2025/01/09/hexo%E5%A2%9E%E5%8A%A0utteranc%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9F/</id>
    <published>2025-01-09T08:44:29.000Z</published>
    <updated>2025-01-09T09:08:29.613Z</updated>
    
    <content type="html"><![CDATA[<p><img data-src="https://images.idevv.us.kg/app/hide.php?key=UEY3L3hUK0lmbDRuTWVabW5jWTJ3M1BNSDNnYUZ2Z1J6Unc9"></p><h2 id="在配置utteranc评论系统时，按照大多数网上搜索到的办法："><a href="#在配置utteranc评论系统时，按照大多数网上搜索到的办法：" class="headerlink" title="在配置utteranc评论系统时，按照大多数网上搜索到的办法："></a>在配置utteranc评论系统时，按照大多数网上搜索到的办法：</h2><p>1、GitHub install utterances；<br>2、在next _config.yml中配置相关配置。<br>在重启hexo后发现并为生效，原因是因为当前版本的next并未内置utterances的相关配置模版。</p><span id="more"></span><blockquote><p><a href="https://blog.mylab.cc/2020/05/20/Hexo-Next%25E4%25B8%25BB%25E9%25A2%2598%25E6%25B7%25BB%25E5%258A%25A0Utterances%25E8%25AF%2584%25E8%25AE%25BA%25E7%25B3%25BB%25E7%25BB%259F/">参考原文地址</a></p></blockquote><h2 id="解决办法："><a href="#解决办法：" class="headerlink" title="解决办法："></a>解决办法：</h2><blockquote><p>在GitHub安装好utterances插件之后再根据以下步骤操作</p></blockquote><p>创建utterances.swig</p><ul><li>在layout&#x2F;_third-party&#x2F;comments里创建utterances.swig，内容如下</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&#123;%- <span class="keyword">if</span> page.<span class="property">comments</span> %&#125;</span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="title class_">NexT</span>.<span class="property">utils</span>.<span class="title function_">loadComments</span>(<span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#utterances-container&#x27;</span>), <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// if (typeof parcelRequire === &#x27;function&#x27;) &#123; return; &#125;</span></span><br><span class="line">    <span class="keyword">var</span> js = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;script&#x27;</span>);</span><br><span class="line">    js.<span class="property">type</span> = <span class="string">&#x27;text/javascript&#x27;</span>;</span><br><span class="line">    js.<span class="property">src</span> = <span class="string">&#x27;https://utteranc.es/client.js&#x27;</span>;</span><br><span class="line">    js.<span class="property">async</span> = <span class="literal">true</span>;</span><br><span class="line">    js.<span class="property">crossorigin</span> = <span class="string">&#x27;anonymous&#x27;</span>;</span><br><span class="line">    js.<span class="title function_">setAttribute</span>(<span class="string">&#x27;repo&#x27;</span>, <span class="string">&#x27;&#123;&#123; theme.utterances.repo &#125;&#125;&#x27;</span>);</span><br><span class="line">    js.<span class="title function_">setAttribute</span>(<span class="string">&#x27;issue-term&#x27;</span>, <span class="string">&#x27;&#123;&#123; theme.utterances.issue_term &#125;&#125;&#x27;</span>);</span><br><span class="line">    js.<span class="title function_">setAttribute</span>(<span class="string">&#x27;theme&#x27;</span>, <span class="string">&#x27;&#123;&#123; theme.utterances.theme &#125;&#125;&#x27;</span>);</span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;utterances-container&#x27;</span>).<span class="title function_">appendChild</span>(js);</span><br><span class="line">&#125;);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&#123;%- endif %&#125;</span><br></pre></td></tr></table></figure><p>创建utterances.js</p><ul><li>在scripts&#x2F;filters&#x2F;comment下创建utterances.js，内容如下</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* global hexo */</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">&#x27;use strict&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Add comment</span></span><br><span class="line">hexo.<span class="property">extend</span>.<span class="property">filter</span>.<span class="title function_">register</span>(<span class="string">&#x27;theme_inject&#x27;</span>, <span class="function"><span class="params">injects</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> theme = hexo.<span class="property">theme</span>.<span class="property">config</span>;</span><br><span class="line">  <span class="keyword">if</span> (!theme.<span class="property">utterances</span>.<span class="property">enable</span>) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">  injects.<span class="property">comment</span>.<span class="title function_">raw</span>(<span class="string">&#x27;utterances&#x27;</span>, <span class="string">&#x27;&lt;div class=&quot;comments&quot; id=&quot;utterances-container&quot;&gt;&lt;/div&gt;&#x27;</span>, &#123;&#125;, &#123;<span class="attr">cache</span>: <span class="literal">true</span>&#125;);</span><br><span class="line"></span><br><span class="line">  injects.<span class="property">bodyEnd</span>.<span class="title function_">file</span>(<span class="string">&#x27;utterances&#x27;</span>, path.<span class="title function_">join</span>(hexo.<span class="property">theme_dir</span>, <span class="string">&#x27;layout/_third-party/comments/utterances.swig&#x27;</span>));</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="修改主题配置文件"><a href="#修改主题配置文件" class="headerlink" title="修改主题配置文件"></a>修改主题配置文件</h2><ul><li>在主题配置文件中添加</li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">utterances:</span> </span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">&quot;你的repo地址&quot;</span></span><br><span class="line">  <span class="attr">issue_term:</span> <span class="string">&quot;pathname&quot;</span></span><br><span class="line">  <span class="attr">theme:</span> <span class="string">&quot;github-light&quot;</span></span><br></pre></td></tr></table></figure><ul><li>在主配置_config.yml文件中的url中配置好博客的地址，比如：<code>url: https://yourdomain.com</code></li></ul><h2 id="最后重启博客系统就能够看到评论模块了"><a href="#最后重启博客系统就能够看到评论模块了" class="headerlink" title="最后重启博客系统就能够看到评论模块了"></a>最后重启博客系统就能够看到评论模块了</h2><p><img data-src="https://images.idevv.us.kg/app/hide.php?key=TnNSZGtNb0sybFVkUUNrL1lwbzZoNUg2RHhKL2VpOFFBeTA9"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img data-src=&quot;https://images.idevv.us.kg/app/hide.php?key=UEY3L3hUK0lmbDRuTWVabW5jWTJ3M1BNSDNnYUZ2Z1J6Unc9&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;在配置utteranc评论系统时，按照大多数网上搜索到的办法：&quot;&gt;&lt;a href=&quot;#在配置utteranc评论系统时，按照大多数网上搜索到的办法：&quot; class=&quot;headerlink&quot; title=&quot;在配置utteranc评论系统时，按照大多数网上搜索到的办法：&quot;&gt;&lt;/a&gt;在配置utteranc评论系统时，按照大多数网上搜索到的办法：&lt;/h2&gt;&lt;p&gt;1、GitHub install utterances；&lt;br&gt;2、在next _config.yml中配置相关配置。&lt;br&gt;在重启hexo后发现并为生效，原因是因为当前版本的next并未内置utterances的相关配置模版。&lt;/p&gt;</summary>
    
    
    
    <category term="博客" scheme="https://idevv.us.kg/categories/%E5%8D%9A%E5%AE%A2/"/>
    
    
    <category term="hexo" scheme="https://idevv.us.kg/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>nginx常用配置解析</title>
    <link href="https://idevv.us.kg/2025/01/09/nginx%E5%B8%B8%E7%94%A8%E9%85%8D%E7%BD%AE%E8%A7%A3%E6%9E%90/"/>
    <id>https://idevv.us.kg/2025/01/09/nginx%E5%B8%B8%E7%94%A8%E9%85%8D%E7%BD%AE%E8%A7%A3%E6%9E%90/</id>
    <published>2025-01-09T07:13:18.000Z</published>
    <updated>2025-01-09T09:05:58.893Z</updated>
    
    <content type="html"><![CDATA[<p><img data-src="https://images.idevv.us.kg/app/hide.php?key=djYrSm9FZCswai9kVjgzanJNeUszVkVqQ2NUUHVlam9sSFQw"></p><h1 id="常见-Nginx-配置的解析和使用说明，包括基本配置、反向代理、负载均衡、缓存等常用场景"><a href="#常见-Nginx-配置的解析和使用说明，包括基本配置、反向代理、负载均衡、缓存等常用场景" class="headerlink" title="常见 Nginx 配置的解析和使用说明，包括基本配置、反向代理、负载均衡、缓存等常用场景"></a>常见 Nginx 配置的解析和使用说明，包括基本配置、反向代理、负载均衡、缓存等常用场景</h1><span id="more"></span><h2 id="1-基础配置"><a href="#1-基础配置" class="headerlink" title="1. 基础配置"></a>1. 基础配置</h2><p>配置文件路径：</p><ul><li>主配置文件：&#x2F;etc&#x2F;nginx&#x2F;nginx.conf</li><li>站点配置：通常在 &#x2F;etc&#x2F;nginx&#x2F;conf.d&#x2F;*.conf 或 &#x2F;etc&#x2F;nginx&#x2F;sites-available&#x2F; 中。<br>常见结构：</li></ul><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">worker_processes</span> auto;  <span class="comment"># 自动分配工作进程数</span></span><br><span class="line"><span class="section">events</span> &#123;</span><br><span class="line">    <span class="attribute">worker_connections</span> <span class="number">1024</span>;  <span class="comment"># 每个进程的最大连接数</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="section">http</span> &#123;</span><br><span class="line">    <span class="attribute">include</span>       mime.types;  <span class="comment"># 文件类型映射</span></span><br><span class="line">    <span class="attribute">default_type</span>  application/octet-stream;  <span class="comment"># 默认 MIME 类型</span></span><br><span class="line">    <span class="attribute">sendfile</span>      <span class="literal">on</span>;  <span class="comment"># 优化传输效率</span></span><br><span class="line">    <span class="attribute">keepalive_timeout</span> <span class="number">65</span>;  <span class="comment"># 连接保持时间</span></span><br><span class="line"></span><br><span class="line">    <span class="section">server</span> &#123;</span><br><span class="line">        <span class="attribute">listen</span>       <span class="number">80</span>;  <span class="comment"># 监听端口</span></span><br><span class="line">        <span class="attribute">server_name</span>  example.com;  <span class="comment"># 绑定域名</span></span><br><span class="line"></span><br><span class="line">        <span class="section">location</span> / &#123;</span><br><span class="line">            <span class="attribute">root</span>   /usr/share/nginx/html;  <span class="comment"># 根目录</span></span><br><span class="line">            <span class="attribute">index</span>  index.html index.htm;  <span class="comment"># 默认首页</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="attribute">error_page</span> <span class="number">404</span> /<span class="number">404</span>.html;  <span class="comment"># 自定义 404 错误页面</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-反向代理"><a href="#2-反向代理" class="headerlink" title="2. 反向代理"></a>2. 反向代理</h2><p>Nginx 常用作反向代理，将请求转发到后端服务。</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">server_name</span> example.com;</span><br><span class="line"></span><br><span class="line">    <span class="section">location</span> / &#123;</span><br><span class="line">        <span class="attribute">proxy_pass</span> http://127.0.0.1:8080;  <span class="comment"># 转发到后端服务</span></span><br><span class="line">        <span class="attribute">proxy_set_header</span> Host <span class="variable">$host</span>;       <span class="comment"># 保留原始请求的 Host 头</span></span><br><span class="line">        <span class="attribute">proxy_set_header</span> X-Real-IP <span class="variable">$remote_addr</span>;  <span class="comment"># 客户端真实 IP</span></span><br><span class="line">        <span class="attribute">proxy_set_header</span> X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>常用指令：</p><ul><li>proxy_pass：指定后端服务地址。</li><li>proxy_set_header：自定义请求头转发。</li><li>proxy_connect_timeout：连接超时时间。</li><li>proxy_read_timeout：后端响应超时时间。</li></ul><ol start="3"><li>负载均衡<br>Nginx 支持多种负载均衡策略。</li></ol><p>配置示例：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">upstream</span> backend &#123;</span><br><span class="line">    <span class="attribute">server</span> <span class="number">127.0.0.1:8080</span>;  <span class="comment"># 后端服务 1</span></span><br><span class="line">    <span class="attribute">server</span> <span class="number">127.0.0.1:8081</span>;  <span class="comment"># 后端服务 2</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">server_name</span> example.com;</span><br><span class="line"></span><br><span class="line">    <span class="section">location</span> / &#123;</span><br><span class="line">        <span class="attribute">proxy_pass</span> http://backend;  <span class="comment"># 转发到 upstream 定义的后端组</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>负载均衡策略：</p><ul><li>轮询（默认）： 请求按顺序分配。</li><li>权重： 设置每个后端的请求分配权重。</li></ul><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">upstream</span> backend &#123;</span><br><span class="line">    <span class="attribute">server</span> <span class="number">127.0.0.1:8080</span> weight=<span class="number">3</span>;</span><br><span class="line">    <span class="attribute">server</span> <span class="number">127.0.0.1:8081</span> weight=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>IP 哈希： 按客户端 IP 分配请求，保持会话一致性。</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">upstream</span> backend &#123;</span><br><span class="line">    ip_hash;</span><br><span class="line">    <span class="attribute">server</span> <span class="number">127.0.0.1:8080</span>;</span><br><span class="line">    <span class="attribute">server</span> <span class="number">127.0.0.1:8081</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-静态文件服务"><a href="#4-静态文件服务" class="headerlink" title="4. 静态文件服务"></a>4. 静态文件服务</h2><p>为网站提供高效的静态文件服务。</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">server_name</span> static.example.com;</span><br><span class="line"></span><br><span class="line">    <span class="section">location</span> / &#123;</span><br><span class="line">        <span class="attribute">root</span> /var/www/static;  <span class="comment"># 静态文件存放目录</span></span><br><span class="line">        <span class="attribute">index</span> index.html;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="section">location</span> <span class="regexp">~* \.(jpg|jpeg|png|gif|ico|css|js|woff|ttf|svg|eot)$</span> &#123;</span><br><span class="line">        <span class="attribute">expires</span> <span class="number">30d</span>;  <span class="comment"># 设置缓存时间</span></span><br><span class="line">        <span class="attribute">access_log</span> <span class="literal">off</span>;  <span class="comment"># 禁用日志</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-缓存配置"><a href="#5-缓存配置" class="headerlink" title="5. 缓存配置"></a>5. 缓存配置</h2><p>Nginx 支持代理缓存和本地缓存。</p><p>代理缓存：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">proxy_cache_path</span> /data/nginx/cache levels=<span class="number">1</span>:<span class="number">2</span> keys_zone=my_cache:<span class="number">10m</span> inactive=<span class="number">60m</span> max_size=<span class="number">1g</span>;</span><br><span class="line"></span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="section">location</span> / &#123;</span><br><span class="line">        <span class="attribute">proxy_cache</span> my_cache;  <span class="comment"># 使用定义的缓存区域</span></span><br><span class="line">        <span class="attribute">proxy_pass</span> http://backend;</span><br><span class="line">        <span class="attribute">proxy_cache_key</span> <span class="variable">$host</span><span class="variable">$uri</span><span class="variable">$is_args</span><span class="variable">$args</span>;  <span class="comment"># 缓存键</span></span><br><span class="line">        <span class="attribute">proxy_cache_valid</span> <span class="number">200</span> <span class="number">302</span> <span class="number">10m</span>;  <span class="comment"># 有效响应缓存时间</span></span><br><span class="line">        <span class="attribute">proxy_cache_valid</span> <span class="number">404</span> <span class="number">1m</span>;  <span class="comment"># 404 响应缓存时间</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>静态文件缓存：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">location</span> <span class="regexp">~* \.(jpg|jpeg|png|gif|ico|css|js|woff|ttf|svg|eot)$</span> &#123;</span><br><span class="line">    <span class="attribute">expires</span> max;  <span class="comment"># 缓存有效期设置为最大值</span></span><br><span class="line">    <span class="attribute">log_not_found</span> <span class="literal">off</span>;  <span class="comment"># 禁止记录 404 日志</span></span><br><span class="line">    <span class="attribute">access_log</span> <span class="literal">off</span>;  <span class="comment"># 禁止记录访问日志</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6-HTTPS-配置"><a href="#6-HTTPS-配置" class="headerlink" title="6. HTTPS 配置"></a>6. HTTPS 配置</h2><p>为站点配置 SSL 加密。</p><p>配置示例：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">443</span> ssl;</span><br><span class="line">    <span class="attribute">server_name</span> example.com;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">ssl_certificate</span> /etc/nginx/ssl/example.com.crt;  <span class="comment"># SSL 证书路径</span></span><br><span class="line">    <span class="attribute">ssl_certificate_key</span> /etc/nginx/ssl/example.com.key;  <span class="comment"># SSL 密钥路径</span></span><br><span class="line"></span><br><span class="line">    <span class="section">location</span> / &#123;</span><br><span class="line">        <span class="attribute">proxy_pass</span> http://127.0.0.1:8080;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">server_name</span> example.com;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">return</span> <span class="number">301</span> https://<span class="variable">$host</span><span class="variable">$request_uri</span>;  <span class="comment"># HTTP 跳转到 HTTPS</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="7-日志管理"><a href="#7-日志管理" class="headerlink" title="7. 日志管理"></a>7. 日志管理</h2><p>Nginx 提供灵活的访问和错误日志配置。</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">http</span> &#123;</span><br><span class="line">    <span class="attribute">log_format</span> main <span class="string">&#x27;<span class="variable">$remote_addr</span> - <span class="variable">$remote_user</span> [<span class="variable">$time_local</span>] &quot;<span class="variable">$request</span>&quot; &#x27;</span></span><br><span class="line">                    <span class="string">&#x27;<span class="variable">$status</span> <span class="variable">$body_bytes_sent</span> &quot;<span class="variable">$http_referer</span>&quot; &#x27;</span></span><br><span class="line">                    <span class="string">&#x27;&quot;<span class="variable">$http_user_agent</span>&quot; &quot;<span class="variable">$http_x_forwarded_for</span>&quot;&#x27;</span>;</span><br><span class="line">    <span class="attribute">access_log</span> /var/log/nginx/access.log main;</span><br><span class="line">    <span class="attribute">error_log</span> /var/log/nginx/<span class="literal">error</span>.log <span class="literal">warn</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总结</p><table><thead><tr><th>功能</th><th>核心指令</th></tr></thead><tbody><tr><td>静态文件服务</td><td>root、index、expires</td></tr><tr><td>反向代理</td><td>proxy_pass、proxy_set_header</td></tr><tr><td>负载均衡</td><td>upstream、负载均衡策略（轮询、权重、IP 哈希等）</td></tr><tr><td>缓存配置</td><td>proxy_cache_path、proxy_cache</td></tr><tr><td>HTTPS 支持</td><td>ssl_certificate、ssl_certificate_key、强制 HTTPS 跳转</td></tr><tr><td>日志管理</td><td>log_format、access_log、error_log</td></tr></tbody></table>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img data-src=&quot;https://images.idevv.us.kg/app/hide.php?key=djYrSm9FZCswai9kVjgzanJNeUszVkVqQ2NUUHVlam9sSFQw&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;常见-Nginx-配置的解析和使用说明，包括基本配置、反向代理、负载均衡、缓存等常用场景&quot;&gt;&lt;a href=&quot;#常见-Nginx-配置的解析和使用说明，包括基本配置、反向代理、负载均衡、缓存等常用场景&quot; class=&quot;headerlink&quot; title=&quot;常见 Nginx 配置的解析和使用说明，包括基本配置、反向代理、负载均衡、缓存等常用场景&quot;&gt;&lt;/a&gt;常见 Nginx 配置的解析和使用说明，包括基本配置、反向代理、负载均衡、缓存等常用场景&lt;/h1&gt;</summary>
    
    
    
    <category term="运维" scheme="https://idevv.us.kg/categories/%E8%BF%90%E7%BB%B4/"/>
    
    
    <category term="nginx" scheme="https://idevv.us.kg/tags/nginx/"/>
    
  </entry>
  
  <entry>
    <title>Mysql 外键解释</title>
    <link href="https://idevv.us.kg/2025/01/06/Mysql-%E5%A4%96%E9%94%AE%E8%A7%A3%E9%87%8A/"/>
    <id>https://idevv.us.kg/2025/01/06/Mysql-%E5%A4%96%E9%94%AE%E8%A7%A3%E9%87%8A/</id>
    <published>2025-01-06T12:14:58.000Z</published>
    <updated>2025-01-09T09:05:40.085Z</updated>
    
    <content type="html"><![CDATA[<p><img data-src="https://images.idevv.us.kg/app/hide.php?key=MFhNSEUzY1NDZFpaNW5rcUFzV0pwZmNNUDZsU0xaZjJuOXM9"></p><h2 id="在-MySQL-中，外键-Foreign-Key-用于维护表与表之间的关系，保证数据的一致性和完整性。理解-一对一、一对多-和-多对多-关系，核心在于如何通过外键约束建立不同的表之间的关联。"><a href="#在-MySQL-中，外键-Foreign-Key-用于维护表与表之间的关系，保证数据的一致性和完整性。理解-一对一、一对多-和-多对多-关系，核心在于如何通过外键约束建立不同的表之间的关联。" class="headerlink" title="在 MySQL 中，外键 (Foreign Key) 用于维护表与表之间的关系，保证数据的一致性和完整性。理解 一对一、一对多 和 多对多 关系，核心在于如何通过外键约束建立不同的表之间的关联。"></a>在 MySQL 中，外键 (Foreign Key) 用于维护表与表之间的关系，保证数据的一致性和完整性。理解 一对一、一对多 和 多对多 关系，核心在于如何通过外键约束建立不同的表之间的关联。</h2><span id="more"></span><h2 id="一对一-One-to-One"><a href="#一对一-One-to-One" class="headerlink" title="一对一 (One-to-One)"></a>一对一 (One-to-One)</h2><ul><li>定义：一个表中的一条记录只能对应另一个表中的一条记录，反之亦然。</li><li>实现方式：在其中一个表的主键作为外键引用另一个表的主键。<br>示例<br>用户表和用户详情表，每个用户只能有一条对应的详情记录。</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE TABLE</span> users (</span><br><span class="line">    id <span class="type">INT</span> <span class="keyword">PRIMARY KEY</span> AUTO_INCREMENT,</span><br><span class="line">    username <span class="type">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">NOT NULL</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE TABLE</span> user_details (</span><br><span class="line">    user_id <span class="type">INT</span> <span class="keyword">PRIMARY KEY</span>,</span><br><span class="line">    address <span class="type">VARCHAR</span>(<span class="number">255</span>),</span><br><span class="line">    phone_number <span class="type">VARCHAR</span>(<span class="number">20</span>),</span><br><span class="line">    <span class="keyword">FOREIGN KEY</span> (user_id) <span class="keyword">REFERENCES</span> users(id)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>特点</p><ul><li>user_details.user_id 是 users.id 的外键。</li><li>确保每个 user_details 记录与一个 users 记录严格一一对应。</li></ul><p>一对多 (One-to-Many)<br>定义：一个表中的一条记录可以关联另一个表中的多条记录，但反过来不成立。<br>实现方式：在“多”的那一方添加外键，指向“单”的那一方的主键。<br>示例<br>一个用户可以有多篇文章，但一篇文章只能属于一个用户。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE TABLE</span> users (</span><br><span class="line">    id <span class="type">INT</span> <span class="keyword">PRIMARY KEY</span> AUTO_INCREMENT,</span><br><span class="line">    username <span class="type">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">NOT NULL</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE TABLE</span> posts (</span><br><span class="line">    id <span class="type">INT</span> <span class="keyword">PRIMARY KEY</span> AUTO_INCREMENT,</span><br><span class="line">    user_id <span class="type">INT</span> <span class="keyword">NOT NULL</span>,</span><br><span class="line">    title <span class="type">VARCHAR</span>(<span class="number">255</span>),</span><br><span class="line">    content TEXT,</span><br><span class="line">    <span class="keyword">FOREIGN KEY</span> (user_id) <span class="keyword">REFERENCES</span> users(id)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>特点</p><ul><li>posts.user_id 是 users.id 的外键。</li><li>确保 posts 中的多条记录可以对应到 users 中的同一条记录。</li></ul><h2 id="多对多-Many-to-Many"><a href="#多对多-Many-to-Many" class="headerlink" title="多对多 (Many-to-Many)"></a>多对多 (Many-to-Many)</h2><ul><li>定义：一个表中的一条记录可以关联另一个表中的多条记录，同时反过来也成立。</li><li>实现方式：通过中间表来实现，将两张表的主键作为中间表的外键。<br>示例<br>一个学生可以选修多门课程，一门课程可以有多个学生选修。</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE TABLE</span> students (</span><br><span class="line">    id <span class="type">INT</span> <span class="keyword">PRIMARY KEY</span> AUTO_INCREMENT,</span><br><span class="line">    name <span class="type">VARCHAR</span>(<span class="number">50</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE TABLE</span> courses (</span><br><span class="line">    id <span class="type">INT</span> <span class="keyword">PRIMARY KEY</span> AUTO_INCREMENT,</span><br><span class="line">    course_name <span class="type">VARCHAR</span>(<span class="number">100</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE TABLE</span> student_courses (</span><br><span class="line">    student_id <span class="type">INT</span>,</span><br><span class="line">    course_id <span class="type">INT</span>,</span><br><span class="line">    <span class="keyword">PRIMARY KEY</span> (student_id, course_id),</span><br><span class="line">    <span class="keyword">FOREIGN KEY</span> (student_id) <span class="keyword">REFERENCES</span> students(id),</span><br><span class="line">    <span class="keyword">FOREIGN KEY</span> (course_id) <span class="keyword">REFERENCES</span> courses(id)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>特点</p><ul><li>student_courses 是中间表，包含 student_id 和 course_id 两列，分别关联 students 和 courses 表。</li><li>PRIMARY KEY (student_id, course_id) 保证了一个学生不能重复选修同一课程。</li></ul><p>总结<br>一对一：主键对主键，或唯一键。<br>一对多：主键对外键，外键在“多”的那一方。<br>多对多：通过中间表管理两表之间的多对多关系。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img data-src=&quot;https://images.idevv.us.kg/app/hide.php?key=MFhNSEUzY1NDZFpaNW5rcUFzV0pwZmNNUDZsU0xaZjJuOXM9&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;在-MySQL-中，外键-Foreign-Key-用于维护表与表之间的关系，保证数据的一致性和完整性。理解-一对一、一对多-和-多对多-关系，核心在于如何通过外键约束建立不同的表之间的关联。&quot;&gt;&lt;a href=&quot;#在-MySQL-中，外键-Foreign-Key-用于维护表与表之间的关系，保证数据的一致性和完整性。理解-一对一、一对多-和-多对多-关系，核心在于如何通过外键约束建立不同的表之间的关联。&quot; class=&quot;headerlink&quot; title=&quot;在 MySQL 中，外键 (Foreign Key) 用于维护表与表之间的关系，保证数据的一致性和完整性。理解 一对一、一对多 和 多对多 关系，核心在于如何通过外键约束建立不同的表之间的关联。&quot;&gt;&lt;/a&gt;在 MySQL 中，外键 (Foreign Key) 用于维护表与表之间的关系，保证数据的一致性和完整性。理解 一对一、一对多 和 多对多 关系，核心在于如何通过外键约束建立不同的表之间的关联。&lt;/h2&gt;</summary>
    
    
    
    
    <category term="Mysql" scheme="https://idevv.us.kg/tags/Mysql/"/>
    
    <category term="数据库" scheme="https://idevv.us.kg/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>Hexo next主题基本配置</title>
    <link href="https://idevv.us.kg/2025/01/05/Hexo-next%E4%B8%BB%E9%A2%98%E5%9F%BA%E6%9C%AC%E9%85%8D%E7%BD%AE/"/>
    <id>https://idevv.us.kg/2025/01/05/Hexo-next%E4%B8%BB%E9%A2%98%E5%9F%BA%E6%9C%AC%E9%85%8D%E7%BD%AE/</id>
    <published>2025-01-05T01:59:36.000Z</published>
    <updated>2025-01-09T09:05:51.952Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Hexo独立页面的创建与配置"><a href="#Hexo独立页面的创建与配置" class="headerlink" title="Hexo独立页面的创建与配置"></a>Hexo独立页面的创建与配置</h1><p>在 Hexo 中，<code>hexo new page</code> 用于创建独立页面，如 “关于我” (About)、”联系” (Contact) 等。这些页面不属于博客文章，但可以作为网站的重要组成部分。以下是详细的使用步骤：</p><h2 id="1-创建页面"><a href="#1-创建页面" class="headerlink" title="1. 创建页面"></a>1. 创建页面</h2><p>使用以下命令创建一个新页面：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page <span class="string">&quot;about&quot;</span></span><br></pre></td></tr></table></figure><h3 id="生成的结果"><a href="#生成的结果" class="headerlink" title="生成的结果"></a>生成的结果</h3><ul><li>在 <code>source/about/index.md</code> 生成一个文件</li><li>文件内容默认包含 Front Matter，例如：</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">about</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2025-01-05 09:52:16</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure><h2 id="2-编辑页面内容"><a href="#2-编辑页面内容" class="headerlink" title="2. 编辑页面内容"></a>2. 编辑页面内容</h2><p>打开 <code>source/about/index.md</code>，编辑页面内容。例如：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: about</span><br><span class="line"><span class="section">date: 2025-01-05 09:52:16</span></span><br><span class="line"><span class="section">---</span></span><br><span class="line"><span class="section"># 关于我</span></span><br><span class="line">你好，我是 RAY，从事运维开发，热爱 Linux、Python 和 Go 编程！</span><br></pre></td></tr></table></figure><h2 id="3-配置页面路径"><a href="#3-配置页面路径" class="headerlink" title="3. 配置页面路径"></a>3. 配置页面路径</h2><p>默认情况下，访问独立页面的路径是以其文件名命名的：</p><ul><li>访问路径: <code>http://your-domain.com/about/</code></li></ul><p>如果你希望自定义路径，可以在 Front Matter 中添加 <code>permalink</code> 字段：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">About</span> <span class="string">Me</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2025-01-05 12:00:00</span></span><br><span class="line"><span class="attr">permalink:</span> <span class="string">about-me/</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure><p>访问路径将变为：<code>http://your-domain.com/about-me/</code></p><h2 id="4-页面导航显示"><a href="#4-页面导航显示" class="headerlink" title="4. 页面导航显示"></a>4. 页面导航显示</h2><p>要让新页面显示在网站导航栏或其他位置，通常需要修改主题的配置文件（如 <code>themes/&#123;theme&#125;/_config.yml</code> 或主题的布局文件）。</p><h3 id="以常见主题为例"><a href="#以常见主题为例" class="headerlink" title="以常见主题为例"></a>以常见主题为例</h3><p>在主题配置文件中，找到类似 <code>menu</code> 的设置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">menu:</span></span><br><span class="line"><span class="attr">home:</span> <span class="string">/</span></span><br><span class="line"><span class="attr">archives:</span> <span class="string">/archives/</span></span><br><span class="line"><span class="attr">about:</span> <span class="string">/about/</span></span><br></pre></td></tr></table></figure><h2 id="5-生成并查看页面"><a href="#5-生成并查看页面" class="headerlink" title="5. 生成并查看页面"></a>5. 生成并查看页面</h2><p>执行以下命令生成静态页面，并在本地预览：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo generate</span><br><span class="line">hexo server</span><br></pre></td></tr></table></figure><p>浏览器访问：<code>http://localhost:4000/about/</code></p><h2 id="6-部署"><a href="#6-部署" class="headerlink" title="6. 部署"></a>6. 部署</h2><p>确认页面无误后，将其部署到线上：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo deploy</span><br></pre></td></tr></table></figure><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><ul><li><strong>主题支持</strong>: 页面样式和布局受主题的限制。确保你的主题支持自定义页面。</li><li><strong>多语言支持</strong>: 如果使用多语言站点，可根据需要在多语言文件夹中创建页面。</li></ul><p>通过上述步骤，你可以轻松创建并配置 Hexo 的独立页面！如果有更多需求，比如表单、动态内容，可以扩展为自定义插件或通过 HTML 实现。</p>]]></content>
    
    
    <summary type="html">Hexo next主题基本配置</summary>
    
    
    
    <category term="博客" scheme="https://idevv.us.kg/categories/%E5%8D%9A%E5%AE%A2/"/>
    
    
    <category term="Hexo" scheme="https://idevv.us.kg/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>Django ORM 基本用法教程</title>
    <link href="https://idevv.us.kg/2025/01/04/Django%20ORM%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/"/>
    <id>https://idevv.us.kg/2025/01/04/Django%20ORM%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/</id>
    <published>2025-01-04T15:26:52.000Z</published>
    <updated>2025-01-09T08:52:09.224Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Django-ORM-基本用法教程"><a href="#Django-ORM-基本用法教程" class="headerlink" title="Django ORM 基本用法教程"></a>Django ORM 基本用法教程</h1><p>Django ORM(对象关系映射)是Django框架中非常重要的一个组件,它让我们可以使用Python代码来操作数据库,而不需要写原生SQL语句。下面介绍Django ORM的基本用法:</p><h2 id="1-模型定义"><a href="#1-模型定义" class="headerlink" title="1. 模型定义"></a>1. 模型定义</h2><p>在Django中,我们通过定义Model类来创建数据库表:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Book</span>(models.Model):</span><br><span class="line">    title = models.CharField(max_length=<span class="number">100</span>)</span><br><span class="line">    author = models.CharField(max_length=<span class="number">50</span>)</span><br><span class="line">    price = models.DecimalField(max_digits=<span class="number">5</span>, decimal_places=<span class="number">2</span>)</span><br><span class="line">    publish_date = models.DateField()</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">str</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>.title</span><br></pre></td></tr></table></figure><h2 id="2-数据库操作"><a href="#2-数据库操作" class="headerlink" title="2. 数据库操作"></a>2. 数据库操作</h2><h3 id="2-1-创建记录"><a href="#2-1-创建记录" class="headerlink" title="2.1 创建记录"></a>2.1 创建记录</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">方法<span class="number">1</span></span><br><span class="line">book = Book(</span><br><span class="line">    title=<span class="string">&quot;Django实战&quot;</span>,</span><br><span class="line">    author=<span class="string">&quot;张三&quot;</span>,</span><br><span class="line">    price=<span class="number">59.9</span>,</span><br><span class="line">    publish_date=<span class="string">&quot;2024-01-01&quot;</span></span><br><span class="line">)</span><br><span class="line">book.save()</span><br><span class="line">方法<span class="number">2</span></span><br><span class="line">Book.objects.create(</span><br><span class="line">    title=<span class="string">&quot;Python入门&quot;</span>,</span><br><span class="line">    author=<span class="string">&quot;李四&quot;</span>,</span><br><span class="line">    price=<span class="number">45.5</span>,</span><br><span class="line">    publish_date=<span class="string">&quot;2024-02-01&quot;</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><h3 id="2-2-查询记录"><a href="#2-2-查询记录" class="headerlink" title="2.2 查询记录"></a>2.2 查询记录</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">获取所有记录</span><br><span class="line">books = Book.objects.<span class="built_in">all</span>()</span><br><span class="line">获取单条记录</span><br><span class="line">book = Book.objects.get(<span class="built_in">id</span>=<span class="number">1</span>)</span><br><span class="line">条件查询</span><br><span class="line">books = Book.objects.<span class="built_in">filter</span>(pricelt=<span class="number">50</span>) <span class="comment"># 价格小于50的图书</span></span><br><span class="line">books = Book.objects.<span class="built_in">filter</span>(titlecontains=<span class="string">&quot;Django&quot;</span>) <span class="comment"># 标题包含Django的图书</span></span><br><span class="line">排序</span><br><span class="line">books = Book.objects.order_by(<span class="string">&quot;-publish_date&quot;</span>) <span class="comment"># 按发布日期降序</span></span><br></pre></td></tr></table></figure><h3 id="2-3-更新记录"><a href="#2-3-更新记录" class="headerlink" title="2.3 更新记录"></a>2.3 更新记录</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">方法<span class="number">1</span>：更新单个对象</span><br><span class="line">book = Book.objects.get(<span class="built_in">id</span>=<span class="number">1</span>)</span><br><span class="line">book.price = <span class="number">69.9</span></span><br><span class="line">book.save()</span><br><span class="line">方法<span class="number">2</span>：批量更新</span><br><span class="line">Book.objects.<span class="built_in">filter</span>(author=<span class="string">&quot;张三&quot;</span>).update(price=<span class="number">79.9</span>)</span><br></pre></td></tr></table></figure><h3 id="2-4-删除记录"><a href="#2-4-删除记录" class="headerlink" title="2.4 删除记录"></a>2.4 删除记录</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">删除单个记录</span><br><span class="line">book = Book.objects.get(<span class="built_in">id</span>=<span class="number">1</span>)</span><br><span class="line">book.delete()</span><br><span class="line">批量删除</span><br><span class="line">Book.objects.<span class="built_in">filter</span>(pricelt=<span class="number">30</span>).delete()</span><br></pre></td></tr></table></figure><h2 id="3-高级查询"><a href="#3-高级查询" class="headerlink" title="3. 高级查询"></a>3. 高级查询</h2><h3 id="3-1-聚合查询"><a href="#3-1-聚合查询" class="headerlink" title="3.1 聚合查询"></a>3.1 聚合查询</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db.models <span class="keyword">import</span> Avg, Max, Min, Count</span><br><span class="line">计算平均价格</span><br><span class="line">avg_price = Book.objects.aggregate(Avg(<span class="string">&#x27;price&#x27;</span>))</span><br><span class="line">统计每个作者的图书数量</span><br><span class="line">author_count = Book.objects.values(<span class="string">&#x27;author&#x27;</span>).annotate(book_count=Count(<span class="string">&#x27;id&#x27;</span>))</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="3-2-F对象和Q对象"><a href="#3-2-F对象和Q对象" class="headerlink" title="3.2 F对象和Q对象"></a>3.2 F对象和Q对象</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db.models <span class="keyword">import</span> F, Q</span><br><span class="line">F对象：字段之间的比较</span><br><span class="line">Book.objects.<span class="built_in">filter</span>(salesgt=F(<span class="string">&#x27;stock&#x27;</span>)) <span class="comment"># 销量大于库存的图书</span></span><br><span class="line">    Q对象：复杂查询条件</span><br><span class="line">    Book.objects.<span class="built_in">filter</span>(</span><br><span class="line">    Q(pricelt=<span class="number">50</span>) | Q(author=<span class="string">&quot;张三&quot;</span>) <span class="comment"># 价格小于50或作者为张三的图书</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><h2 id="4-关联查询"><a href="#4-关联查询" class="headerlink" title="4. 关联查询"></a>4. 关联查询</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">定义关联模型</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Author</span>(models.Model):</span><br><span class="line">    name = models.CharField(max_length=<span class="number">50</span>)</span><br><span class="line">    email = models.EmailField()</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Book</span>(models.Model):</span><br><span class="line">    title = models.CharField(max_length=<span class="number">100</span>)</span><br><span class="line">    author = models.ForeignKey(Author, on_delete=models.CASCADE)</span><br><span class="line">    关联查询</span><br><span class="line">    查询作者的所有图书</span><br><span class="line">    author = Author.objects.get(<span class="built_in">id</span>=<span class="number">1</span>)</span><br><span class="line">    books = author.book_set.<span class="built_in">all</span>()</span><br><span class="line">    查询图书的作者信息</span><br><span class="line">    book = Book.objects.get(<span class="built_in">id</span>=<span class="number">1</span>)</span><br><span class="line">    author = book.author</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>Django ORM提供了丰富的API来操作数据库，使得数据库操作变得简单直观。上面介绍的只是一些基础用法，Django ORM还有更多高级特性等待你去探索。在实际开发中，建议：</p><ol><li>合理使用查询优化方法，如select_related()和prefetch_related()</li><li>注意查询性能，避免N+1查询问题</li><li>适当使用数据库索引</li><li>对于复杂查询，可以考虑使用原生SQL</li></ol>]]></content>
    
    
    <summary type="html">Django ORM 基本用法教程</summary>
    
    
    
    <category term="Python开发" scheme="https://idevv.us.kg/categories/Python%E5%BC%80%E5%8F%91/"/>
    
    
    <category term="Django" scheme="https://idevv.us.kg/tags/Django/"/>
    
  </entry>
  
</feed>
