<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>iDevv</title>
  
  <subtitle>Dev Life</subtitle>
  <link href="https://idevv.us.kg/atom.xml" rel="self"/>
  
  <link href="https://idevv.us.kg/"/>
  <updated>2025-01-09T09:02:31.344Z</updated>
  <id>https://idevv.us.kg/</id>
  
  <author>
    <name>Ray</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>hexo增加utterances评论系统</title>
    <link href="https://idevv.us.kg/2025/01/09/hexo%E5%A2%9E%E5%8A%A0utteranc%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9F/"/>
    <id>https://idevv.us.kg/2025/01/09/hexo%E5%A2%9E%E5%8A%A0utteranc%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9F/</id>
    <published>2025-01-09T08:44:29.000Z</published>
    <updated>2025-01-09T09:02:31.344Z</updated>
    
    <content type="html"><![CDATA[<p><img data-src="https://images.idevv.us.kg/app/hide.php?key=UEY3L3hUK0lmbDRuTWVabW5jWTJ3M1BNSDNnYUZ2Z1J6Unc9"></p><h2 id="在配置utteranc评论系统时，按照大多数网上搜索到的办法："><a href="#在配置utteranc评论系统时，按照大多数网上搜索到的办法：" class="headerlink" title="在配置utteranc评论系统时，按照大多数网上搜索到的办法："></a>在配置utteranc评论系统时，按照大多数网上搜索到的办法：</h2><p>1、GitHub install utterances；<br>2、在next _config.yml中配置相关配置。<br>在重启hexo后发现并为生效，原因是因为当前版本的next并未内置utterances的相关配置模版。</p><span id="more"></span><h2 id="解决办法："><a href="#解决办法：" class="headerlink" title="解决办法："></a>解决办法：</h2><blockquote><p>在GitHub安装好utterances插件之后再根据以下步骤操作</p></blockquote><p>创建utterances.swig</p><ul><li>在layout&#x2F;_third-party&#x2F;comments里创建utterances.swig，内容如下</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&#123;%- <span class="keyword">if</span> page.<span class="property">comments</span> %&#125;</span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="title class_">NexT</span>.<span class="property">utils</span>.<span class="title function_">loadComments</span>(<span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#utterances-container&#x27;</span>), <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// if (typeof parcelRequire === &#x27;function&#x27;) &#123; return; &#125;</span></span><br><span class="line">    <span class="keyword">var</span> js = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;script&#x27;</span>);</span><br><span class="line">    js.<span class="property">type</span> = <span class="string">&#x27;text/javascript&#x27;</span>;</span><br><span class="line">    js.<span class="property">src</span> = <span class="string">&#x27;https://utteranc.es/client.js&#x27;</span>;</span><br><span class="line">    js.<span class="property">async</span> = <span class="literal">true</span>;</span><br><span class="line">    js.<span class="property">crossorigin</span> = <span class="string">&#x27;anonymous&#x27;</span>;</span><br><span class="line">    js.<span class="title function_">setAttribute</span>(<span class="string">&#x27;repo&#x27;</span>, <span class="string">&#x27;&#123;&#123; theme.utterances.repo &#125;&#125;&#x27;</span>);</span><br><span class="line">    js.<span class="title function_">setAttribute</span>(<span class="string">&#x27;issue-term&#x27;</span>, <span class="string">&#x27;&#123;&#123; theme.utterances.issue_term &#125;&#125;&#x27;</span>);</span><br><span class="line">    js.<span class="title function_">setAttribute</span>(<span class="string">&#x27;theme&#x27;</span>, <span class="string">&#x27;&#123;&#123; theme.utterances.theme &#125;&#125;&#x27;</span>);</span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;utterances-container&#x27;</span>).<span class="title function_">appendChild</span>(js);</span><br><span class="line">&#125;);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&#123;%- endif %&#125;</span><br></pre></td></tr></table></figure><p>创建utterances.js</p><ul><li>在scripts&#x2F;filters&#x2F;comment下创建utterances.js，内容如下</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* global hexo */</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">&#x27;use strict&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Add comment</span></span><br><span class="line">hexo.<span class="property">extend</span>.<span class="property">filter</span>.<span class="title function_">register</span>(<span class="string">&#x27;theme_inject&#x27;</span>, <span class="function"><span class="params">injects</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> theme = hexo.<span class="property">theme</span>.<span class="property">config</span>;</span><br><span class="line">  <span class="keyword">if</span> (!theme.<span class="property">utterances</span>.<span class="property">enable</span>) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">  injects.<span class="property">comment</span>.<span class="title function_">raw</span>(<span class="string">&#x27;utterances&#x27;</span>, <span class="string">&#x27;&lt;div class=&quot;comments&quot; id=&quot;utterances-container&quot;&gt;&lt;/div&gt;&#x27;</span>, &#123;&#125;, &#123;<span class="attr">cache</span>: <span class="literal">true</span>&#125;);</span><br><span class="line"></span><br><span class="line">  injects.<span class="property">bodyEnd</span>.<span class="title function_">file</span>(<span class="string">&#x27;utterances&#x27;</span>, path.<span class="title function_">join</span>(hexo.<span class="property">theme_dir</span>, <span class="string">&#x27;layout/_third-party/comments/utterances.swig&#x27;</span>));</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="修改主题配置文件"><a href="#修改主题配置文件" class="headerlink" title="修改主题配置文件"></a>修改主题配置文件</h2><ul><li>在主题配置文件中添加</li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">utterances:</span> </span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">&quot;你的repo地址&quot;</span></span><br><span class="line">  <span class="attr">issue_term:</span> <span class="string">&quot;pathname&quot;</span></span><br><span class="line">  <span class="attr">theme:</span> <span class="string">&quot;github-light&quot;</span></span><br></pre></td></tr></table></figure><ul><li>在主配置_config.yml文件中的url中配置好博客的地址，比如：<code>url: https://yourdomain.com</code></li></ul><h2 id="最后重启博客系统就能够看到评论模块了"><a href="#最后重启博客系统就能够看到评论模块了" class="headerlink" title="最后重启博客系统就能够看到评论模块了"></a>最后重启博客系统就能够看到评论模块了</h2><p><img data-src="https://images.idevv.us.kg/app/hide.php?key=TnNSZGtNb0sybFVkUUNrL1lwbzZoNUg2RHhKL2VpOFFBeTA9"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img data-src=&quot;https://images.idevv.us.kg/app/hide.php?key=UEY3L3hUK0lmbDRuTWVabW5jWTJ3M1BNSDNnYUZ2Z1J6Unc9&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;在配置utteranc评论系统时，按照大多数网上搜索到的办法：&quot;&gt;&lt;a href=&quot;#在配置utteranc评论系统时，按照大多数网上搜索到的办法：&quot; class=&quot;headerlink&quot; title=&quot;在配置utteranc评论系统时，按照大多数网上搜索到的办法：&quot;&gt;&lt;/a&gt;在配置utteranc评论系统时，按照大多数网上搜索到的办法：&lt;/h2&gt;&lt;p&gt;1、GitHub install utterances；&lt;br&gt;2、在next _config.yml中配置相关配置。&lt;br&gt;在重启hexo后发现并为生效，原因是因为当前版本的next并未内置utterances的相关配置模版。&lt;/p&gt;</summary>
    
    
    
    <category term="博客" scheme="https://idevv.us.kg/categories/%E5%8D%9A%E5%AE%A2/"/>
    
    
    <category term="hexo" scheme="https://idevv.us.kg/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>nginx常用配置解析</title>
    <link href="https://idevv.us.kg/2025/01/09/nginx%E5%B8%B8%E7%94%A8%E9%85%8D%E7%BD%AE%E8%A7%A3%E6%9E%90/"/>
    <id>https://idevv.us.kg/2025/01/09/nginx%E5%B8%B8%E7%94%A8%E9%85%8D%E7%BD%AE%E8%A7%A3%E6%9E%90/</id>
    <published>2025-01-09T07:13:18.000Z</published>
    <updated>2025-01-09T09:05:58.893Z</updated>
    
    <content type="html"><![CDATA[<p><img data-src="https://images.idevv.us.kg/app/hide.php?key=djYrSm9FZCswai9kVjgzanJNeUszVkVqQ2NUUHVlam9sSFQw"></p><h1 id="常见-Nginx-配置的解析和使用说明，包括基本配置、反向代理、负载均衡、缓存等常用场景"><a href="#常见-Nginx-配置的解析和使用说明，包括基本配置、反向代理、负载均衡、缓存等常用场景" class="headerlink" title="常见 Nginx 配置的解析和使用说明，包括基本配置、反向代理、负载均衡、缓存等常用场景"></a>常见 Nginx 配置的解析和使用说明，包括基本配置、反向代理、负载均衡、缓存等常用场景</h1><span id="more"></span><h2 id="1-基础配置"><a href="#1-基础配置" class="headerlink" title="1. 基础配置"></a>1. 基础配置</h2><p>配置文件路径：</p><ul><li>主配置文件：&#x2F;etc&#x2F;nginx&#x2F;nginx.conf</li><li>站点配置：通常在 &#x2F;etc&#x2F;nginx&#x2F;conf.d&#x2F;*.conf 或 &#x2F;etc&#x2F;nginx&#x2F;sites-available&#x2F; 中。<br>常见结构：</li></ul><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">worker_processes</span> auto;  <span class="comment"># 自动分配工作进程数</span></span><br><span class="line"><span class="section">events</span> &#123;</span><br><span class="line">    <span class="attribute">worker_connections</span> <span class="number">1024</span>;  <span class="comment"># 每个进程的最大连接数</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="section">http</span> &#123;</span><br><span class="line">    <span class="attribute">include</span>       mime.types;  <span class="comment"># 文件类型映射</span></span><br><span class="line">    <span class="attribute">default_type</span>  application/octet-stream;  <span class="comment"># 默认 MIME 类型</span></span><br><span class="line">    <span class="attribute">sendfile</span>      <span class="literal">on</span>;  <span class="comment"># 优化传输效率</span></span><br><span class="line">    <span class="attribute">keepalive_timeout</span> <span class="number">65</span>;  <span class="comment"># 连接保持时间</span></span><br><span class="line"></span><br><span class="line">    <span class="section">server</span> &#123;</span><br><span class="line">        <span class="attribute">listen</span>       <span class="number">80</span>;  <span class="comment"># 监听端口</span></span><br><span class="line">        <span class="attribute">server_name</span>  example.com;  <span class="comment"># 绑定域名</span></span><br><span class="line"></span><br><span class="line">        <span class="section">location</span> / &#123;</span><br><span class="line">            <span class="attribute">root</span>   /usr/share/nginx/html;  <span class="comment"># 根目录</span></span><br><span class="line">            <span class="attribute">index</span>  index.html index.htm;  <span class="comment"># 默认首页</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="attribute">error_page</span> <span class="number">404</span> /<span class="number">404</span>.html;  <span class="comment"># 自定义 404 错误页面</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-反向代理"><a href="#2-反向代理" class="headerlink" title="2. 反向代理"></a>2. 反向代理</h2><p>Nginx 常用作反向代理，将请求转发到后端服务。</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">server_name</span> example.com;</span><br><span class="line"></span><br><span class="line">    <span class="section">location</span> / &#123;</span><br><span class="line">        <span class="attribute">proxy_pass</span> http://127.0.0.1:8080;  <span class="comment"># 转发到后端服务</span></span><br><span class="line">        <span class="attribute">proxy_set_header</span> Host <span class="variable">$host</span>;       <span class="comment"># 保留原始请求的 Host 头</span></span><br><span class="line">        <span class="attribute">proxy_set_header</span> X-Real-IP <span class="variable">$remote_addr</span>;  <span class="comment"># 客户端真实 IP</span></span><br><span class="line">        <span class="attribute">proxy_set_header</span> X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>常用指令：</p><ul><li>proxy_pass：指定后端服务地址。</li><li>proxy_set_header：自定义请求头转发。</li><li>proxy_connect_timeout：连接超时时间。</li><li>proxy_read_timeout：后端响应超时时间。</li></ul><ol start="3"><li>负载均衡<br>Nginx 支持多种负载均衡策略。</li></ol><p>配置示例：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">upstream</span> backend &#123;</span><br><span class="line">    <span class="attribute">server</span> <span class="number">127.0.0.1:8080</span>;  <span class="comment"># 后端服务 1</span></span><br><span class="line">    <span class="attribute">server</span> <span class="number">127.0.0.1:8081</span>;  <span class="comment"># 后端服务 2</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">server_name</span> example.com;</span><br><span class="line"></span><br><span class="line">    <span class="section">location</span> / &#123;</span><br><span class="line">        <span class="attribute">proxy_pass</span> http://backend;  <span class="comment"># 转发到 upstream 定义的后端组</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>负载均衡策略：</p><ul><li>轮询（默认）： 请求按顺序分配。</li><li>权重： 设置每个后端的请求分配权重。</li></ul><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">upstream</span> backend &#123;</span><br><span class="line">    <span class="attribute">server</span> <span class="number">127.0.0.1:8080</span> weight=<span class="number">3</span>;</span><br><span class="line">    <span class="attribute">server</span> <span class="number">127.0.0.1:8081</span> weight=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>IP 哈希： 按客户端 IP 分配请求，保持会话一致性。</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">upstream</span> backend &#123;</span><br><span class="line">    ip_hash;</span><br><span class="line">    <span class="attribute">server</span> <span class="number">127.0.0.1:8080</span>;</span><br><span class="line">    <span class="attribute">server</span> <span class="number">127.0.0.1:8081</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-静态文件服务"><a href="#4-静态文件服务" class="headerlink" title="4. 静态文件服务"></a>4. 静态文件服务</h2><p>为网站提供高效的静态文件服务。</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">server_name</span> static.example.com;</span><br><span class="line"></span><br><span class="line">    <span class="section">location</span> / &#123;</span><br><span class="line">        <span class="attribute">root</span> /var/www/static;  <span class="comment"># 静态文件存放目录</span></span><br><span class="line">        <span class="attribute">index</span> index.html;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="section">location</span> <span class="regexp">~* \.(jpg|jpeg|png|gif|ico|css|js|woff|ttf|svg|eot)$</span> &#123;</span><br><span class="line">        <span class="attribute">expires</span> <span class="number">30d</span>;  <span class="comment"># 设置缓存时间</span></span><br><span class="line">        <span class="attribute">access_log</span> <span class="literal">off</span>;  <span class="comment"># 禁用日志</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-缓存配置"><a href="#5-缓存配置" class="headerlink" title="5. 缓存配置"></a>5. 缓存配置</h2><p>Nginx 支持代理缓存和本地缓存。</p><p>代理缓存：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">proxy_cache_path</span> /data/nginx/cache levels=<span class="number">1</span>:<span class="number">2</span> keys_zone=my_cache:<span class="number">10m</span> inactive=<span class="number">60m</span> max_size=<span class="number">1g</span>;</span><br><span class="line"></span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="section">location</span> / &#123;</span><br><span class="line">        <span class="attribute">proxy_cache</span> my_cache;  <span class="comment"># 使用定义的缓存区域</span></span><br><span class="line">        <span class="attribute">proxy_pass</span> http://backend;</span><br><span class="line">        <span class="attribute">proxy_cache_key</span> <span class="variable">$host</span><span class="variable">$uri</span><span class="variable">$is_args</span><span class="variable">$args</span>;  <span class="comment"># 缓存键</span></span><br><span class="line">        <span class="attribute">proxy_cache_valid</span> <span class="number">200</span> <span class="number">302</span> <span class="number">10m</span>;  <span class="comment"># 有效响应缓存时间</span></span><br><span class="line">        <span class="attribute">proxy_cache_valid</span> <span class="number">404</span> <span class="number">1m</span>;  <span class="comment"># 404 响应缓存时间</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>静态文件缓存：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">location</span> <span class="regexp">~* \.(jpg|jpeg|png|gif|ico|css|js|woff|ttf|svg|eot)$</span> &#123;</span><br><span class="line">    <span class="attribute">expires</span> max;  <span class="comment"># 缓存有效期设置为最大值</span></span><br><span class="line">    <span class="attribute">log_not_found</span> <span class="literal">off</span>;  <span class="comment"># 禁止记录 404 日志</span></span><br><span class="line">    <span class="attribute">access_log</span> <span class="literal">off</span>;  <span class="comment"># 禁止记录访问日志</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6-HTTPS-配置"><a href="#6-HTTPS-配置" class="headerlink" title="6. HTTPS 配置"></a>6. HTTPS 配置</h2><p>为站点配置 SSL 加密。</p><p>配置示例：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">443</span> ssl;</span><br><span class="line">    <span class="attribute">server_name</span> example.com;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">ssl_certificate</span> /etc/nginx/ssl/example.com.crt;  <span class="comment"># SSL 证书路径</span></span><br><span class="line">    <span class="attribute">ssl_certificate_key</span> /etc/nginx/ssl/example.com.key;  <span class="comment"># SSL 密钥路径</span></span><br><span class="line"></span><br><span class="line">    <span class="section">location</span> / &#123;</span><br><span class="line">        <span class="attribute">proxy_pass</span> http://127.0.0.1:8080;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">server_name</span> example.com;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">return</span> <span class="number">301</span> https://<span class="variable">$host</span><span class="variable">$request_uri</span>;  <span class="comment"># HTTP 跳转到 HTTPS</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="7-日志管理"><a href="#7-日志管理" class="headerlink" title="7. 日志管理"></a>7. 日志管理</h2><p>Nginx 提供灵活的访问和错误日志配置。</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">http</span> &#123;</span><br><span class="line">    <span class="attribute">log_format</span> main <span class="string">&#x27;<span class="variable">$remote_addr</span> - <span class="variable">$remote_user</span> [<span class="variable">$time_local</span>] &quot;<span class="variable">$request</span>&quot; &#x27;</span></span><br><span class="line">                    <span class="string">&#x27;<span class="variable">$status</span> <span class="variable">$body_bytes_sent</span> &quot;<span class="variable">$http_referer</span>&quot; &#x27;</span></span><br><span class="line">                    <span class="string">&#x27;&quot;<span class="variable">$http_user_agent</span>&quot; &quot;<span class="variable">$http_x_forwarded_for</span>&quot;&#x27;</span>;</span><br><span class="line">    <span class="attribute">access_log</span> /var/log/nginx/access.log main;</span><br><span class="line">    <span class="attribute">error_log</span> /var/log/nginx/<span class="literal">error</span>.log <span class="literal">warn</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总结</p><table><thead><tr><th>功能</th><th>核心指令</th></tr></thead><tbody><tr><td>静态文件服务</td><td>root、index、expires</td></tr><tr><td>反向代理</td><td>proxy_pass、proxy_set_header</td></tr><tr><td>负载均衡</td><td>upstream、负载均衡策略（轮询、权重、IP 哈希等）</td></tr><tr><td>缓存配置</td><td>proxy_cache_path、proxy_cache</td></tr><tr><td>HTTPS 支持</td><td>ssl_certificate、ssl_certificate_key、强制 HTTPS 跳转</td></tr><tr><td>日志管理</td><td>log_format、access_log、error_log</td></tr></tbody></table>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img data-src=&quot;https://images.idevv.us.kg/app/hide.php?key=djYrSm9FZCswai9kVjgzanJNeUszVkVqQ2NUUHVlam9sSFQw&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;常见-Nginx-配置的解析和使用说明，包括基本配置、反向代理、负载均衡、缓存等常用场景&quot;&gt;&lt;a href=&quot;#常见-Nginx-配置的解析和使用说明，包括基本配置、反向代理、负载均衡、缓存等常用场景&quot; class=&quot;headerlink&quot; title=&quot;常见 Nginx 配置的解析和使用说明，包括基本配置、反向代理、负载均衡、缓存等常用场景&quot;&gt;&lt;/a&gt;常见 Nginx 配置的解析和使用说明，包括基本配置、反向代理、负载均衡、缓存等常用场景&lt;/h1&gt;</summary>
    
    
    
    <category term="运维" scheme="https://idevv.us.kg/categories/%E8%BF%90%E7%BB%B4/"/>
    
    
    <category term="nginx" scheme="https://idevv.us.kg/tags/nginx/"/>
    
  </entry>
  
  <entry>
    <title>Mysql 外键解释</title>
    <link href="https://idevv.us.kg/2025/01/06/Mysql-%E5%A4%96%E9%94%AE%E8%A7%A3%E9%87%8A/"/>
    <id>https://idevv.us.kg/2025/01/06/Mysql-%E5%A4%96%E9%94%AE%E8%A7%A3%E9%87%8A/</id>
    <published>2025-01-06T12:14:58.000Z</published>
    <updated>2025-01-09T09:05:40.085Z</updated>
    
    <content type="html"><![CDATA[<p><img data-src="https://images.idevv.us.kg/app/hide.php?key=MFhNSEUzY1NDZFpaNW5rcUFzV0pwZmNNUDZsU0xaZjJuOXM9"></p><h2 id="在-MySQL-中，外键-Foreign-Key-用于维护表与表之间的关系，保证数据的一致性和完整性。理解-一对一、一对多-和-多对多-关系，核心在于如何通过外键约束建立不同的表之间的关联。"><a href="#在-MySQL-中，外键-Foreign-Key-用于维护表与表之间的关系，保证数据的一致性和完整性。理解-一对一、一对多-和-多对多-关系，核心在于如何通过外键约束建立不同的表之间的关联。" class="headerlink" title="在 MySQL 中，外键 (Foreign Key) 用于维护表与表之间的关系，保证数据的一致性和完整性。理解 一对一、一对多 和 多对多 关系，核心在于如何通过外键约束建立不同的表之间的关联。"></a>在 MySQL 中，外键 (Foreign Key) 用于维护表与表之间的关系，保证数据的一致性和完整性。理解 一对一、一对多 和 多对多 关系，核心在于如何通过外键约束建立不同的表之间的关联。</h2><span id="more"></span><h2 id="一对一-One-to-One"><a href="#一对一-One-to-One" class="headerlink" title="一对一 (One-to-One)"></a>一对一 (One-to-One)</h2><ul><li>定义：一个表中的一条记录只能对应另一个表中的一条记录，反之亦然。</li><li>实现方式：在其中一个表的主键作为外键引用另一个表的主键。<br>示例<br>用户表和用户详情表，每个用户只能有一条对应的详情记录。</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE TABLE</span> users (</span><br><span class="line">    id <span class="type">INT</span> <span class="keyword">PRIMARY KEY</span> AUTO_INCREMENT,</span><br><span class="line">    username <span class="type">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">NOT NULL</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE TABLE</span> user_details (</span><br><span class="line">    user_id <span class="type">INT</span> <span class="keyword">PRIMARY KEY</span>,</span><br><span class="line">    address <span class="type">VARCHAR</span>(<span class="number">255</span>),</span><br><span class="line">    phone_number <span class="type">VARCHAR</span>(<span class="number">20</span>),</span><br><span class="line">    <span class="keyword">FOREIGN KEY</span> (user_id) <span class="keyword">REFERENCES</span> users(id)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>特点</p><ul><li>user_details.user_id 是 users.id 的外键。</li><li>确保每个 user_details 记录与一个 users 记录严格一一对应。</li></ul><p>一对多 (One-to-Many)<br>定义：一个表中的一条记录可以关联另一个表中的多条记录，但反过来不成立。<br>实现方式：在“多”的那一方添加外键，指向“单”的那一方的主键。<br>示例<br>一个用户可以有多篇文章，但一篇文章只能属于一个用户。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE TABLE</span> users (</span><br><span class="line">    id <span class="type">INT</span> <span class="keyword">PRIMARY KEY</span> AUTO_INCREMENT,</span><br><span class="line">    username <span class="type">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">NOT NULL</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE TABLE</span> posts (</span><br><span class="line">    id <span class="type">INT</span> <span class="keyword">PRIMARY KEY</span> AUTO_INCREMENT,</span><br><span class="line">    user_id <span class="type">INT</span> <span class="keyword">NOT NULL</span>,</span><br><span class="line">    title <span class="type">VARCHAR</span>(<span class="number">255</span>),</span><br><span class="line">    content TEXT,</span><br><span class="line">    <span class="keyword">FOREIGN KEY</span> (user_id) <span class="keyword">REFERENCES</span> users(id)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>特点</p><ul><li>posts.user_id 是 users.id 的外键。</li><li>确保 posts 中的多条记录可以对应到 users 中的同一条记录。</li></ul><h2 id="多对多-Many-to-Many"><a href="#多对多-Many-to-Many" class="headerlink" title="多对多 (Many-to-Many)"></a>多对多 (Many-to-Many)</h2><ul><li>定义：一个表中的一条记录可以关联另一个表中的多条记录，同时反过来也成立。</li><li>实现方式：通过中间表来实现，将两张表的主键作为中间表的外键。<br>示例<br>一个学生可以选修多门课程，一门课程可以有多个学生选修。</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE TABLE</span> students (</span><br><span class="line">    id <span class="type">INT</span> <span class="keyword">PRIMARY KEY</span> AUTO_INCREMENT,</span><br><span class="line">    name <span class="type">VARCHAR</span>(<span class="number">50</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE TABLE</span> courses (</span><br><span class="line">    id <span class="type">INT</span> <span class="keyword">PRIMARY KEY</span> AUTO_INCREMENT,</span><br><span class="line">    course_name <span class="type">VARCHAR</span>(<span class="number">100</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE TABLE</span> student_courses (</span><br><span class="line">    student_id <span class="type">INT</span>,</span><br><span class="line">    course_id <span class="type">INT</span>,</span><br><span class="line">    <span class="keyword">PRIMARY KEY</span> (student_id, course_id),</span><br><span class="line">    <span class="keyword">FOREIGN KEY</span> (student_id) <span class="keyword">REFERENCES</span> students(id),</span><br><span class="line">    <span class="keyword">FOREIGN KEY</span> (course_id) <span class="keyword">REFERENCES</span> courses(id)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>特点</p><ul><li>student_courses 是中间表，包含 student_id 和 course_id 两列，分别关联 students 和 courses 表。</li><li>PRIMARY KEY (student_id, course_id) 保证了一个学生不能重复选修同一课程。</li></ul><p>总结<br>一对一：主键对主键，或唯一键。<br>一对多：主键对外键，外键在“多”的那一方。<br>多对多：通过中间表管理两表之间的多对多关系。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img data-src=&quot;https://images.idevv.us.kg/app/hide.php?key=MFhNSEUzY1NDZFpaNW5rcUFzV0pwZmNNUDZsU0xaZjJuOXM9&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;在-MySQL-中，外键-Foreign-Key-用于维护表与表之间的关系，保证数据的一致性和完整性。理解-一对一、一对多-和-多对多-关系，核心在于如何通过外键约束建立不同的表之间的关联。&quot;&gt;&lt;a href=&quot;#在-MySQL-中，外键-Foreign-Key-用于维护表与表之间的关系，保证数据的一致性和完整性。理解-一对一、一对多-和-多对多-关系，核心在于如何通过外键约束建立不同的表之间的关联。&quot; class=&quot;headerlink&quot; title=&quot;在 MySQL 中，外键 (Foreign Key) 用于维护表与表之间的关系，保证数据的一致性和完整性。理解 一对一、一对多 和 多对多 关系，核心在于如何通过外键约束建立不同的表之间的关联。&quot;&gt;&lt;/a&gt;在 MySQL 中，外键 (Foreign Key) 用于维护表与表之间的关系，保证数据的一致性和完整性。理解 一对一、一对多 和 多对多 关系，核心在于如何通过外键约束建立不同的表之间的关联。&lt;/h2&gt;</summary>
    
    
    
    
    <category term="Mysql" scheme="https://idevv.us.kg/tags/Mysql/"/>
    
    <category term="数据库" scheme="https://idevv.us.kg/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>Hexo next主题基本配置</title>
    <link href="https://idevv.us.kg/2025/01/05/Hexo-next%E4%B8%BB%E9%A2%98%E5%9F%BA%E6%9C%AC%E9%85%8D%E7%BD%AE/"/>
    <id>https://idevv.us.kg/2025/01/05/Hexo-next%E4%B8%BB%E9%A2%98%E5%9F%BA%E6%9C%AC%E9%85%8D%E7%BD%AE/</id>
    <published>2025-01-05T01:59:36.000Z</published>
    <updated>2025-01-09T09:05:51.952Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Hexo独立页面的创建与配置"><a href="#Hexo独立页面的创建与配置" class="headerlink" title="Hexo独立页面的创建与配置"></a>Hexo独立页面的创建与配置</h1><p>在 Hexo 中，<code>hexo new page</code> 用于创建独立页面，如 “关于我” (About)、”联系” (Contact) 等。这些页面不属于博客文章，但可以作为网站的重要组成部分。以下是详细的使用步骤：</p><h2 id="1-创建页面"><a href="#1-创建页面" class="headerlink" title="1. 创建页面"></a>1. 创建页面</h2><p>使用以下命令创建一个新页面：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page <span class="string">&quot;about&quot;</span></span><br></pre></td></tr></table></figure><h3 id="生成的结果"><a href="#生成的结果" class="headerlink" title="生成的结果"></a>生成的结果</h3><ul><li>在 <code>source/about/index.md</code> 生成一个文件</li><li>文件内容默认包含 Front Matter，例如：</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">about</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2025-01-05 09:52:16</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure><h2 id="2-编辑页面内容"><a href="#2-编辑页面内容" class="headerlink" title="2. 编辑页面内容"></a>2. 编辑页面内容</h2><p>打开 <code>source/about/index.md</code>，编辑页面内容。例如：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: about</span><br><span class="line"><span class="section">date: 2025-01-05 09:52:16</span></span><br><span class="line"><span class="section">---</span></span><br><span class="line"><span class="section"># 关于我</span></span><br><span class="line">你好，我是 RAY，从事运维开发，热爱 Linux、Python 和 Go 编程！</span><br></pre></td></tr></table></figure><h2 id="3-配置页面路径"><a href="#3-配置页面路径" class="headerlink" title="3. 配置页面路径"></a>3. 配置页面路径</h2><p>默认情况下，访问独立页面的路径是以其文件名命名的：</p><ul><li>访问路径: <code>http://your-domain.com/about/</code></li></ul><p>如果你希望自定义路径，可以在 Front Matter 中添加 <code>permalink</code> 字段：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">About</span> <span class="string">Me</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2025-01-05 12:00:00</span></span><br><span class="line"><span class="attr">permalink:</span> <span class="string">about-me/</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure><p>访问路径将变为：<code>http://your-domain.com/about-me/</code></p><h2 id="4-页面导航显示"><a href="#4-页面导航显示" class="headerlink" title="4. 页面导航显示"></a>4. 页面导航显示</h2><p>要让新页面显示在网站导航栏或其他位置，通常需要修改主题的配置文件（如 <code>themes/&#123;theme&#125;/_config.yml</code> 或主题的布局文件）。</p><h3 id="以常见主题为例"><a href="#以常见主题为例" class="headerlink" title="以常见主题为例"></a>以常见主题为例</h3><p>在主题配置文件中，找到类似 <code>menu</code> 的设置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">menu:</span></span><br><span class="line"><span class="attr">home:</span> <span class="string">/</span></span><br><span class="line"><span class="attr">archives:</span> <span class="string">/archives/</span></span><br><span class="line"><span class="attr">about:</span> <span class="string">/about/</span></span><br></pre></td></tr></table></figure><h2 id="5-生成并查看页面"><a href="#5-生成并查看页面" class="headerlink" title="5. 生成并查看页面"></a>5. 生成并查看页面</h2><p>执行以下命令生成静态页面，并在本地预览：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo generate</span><br><span class="line">hexo server</span><br></pre></td></tr></table></figure><p>浏览器访问：<code>http://localhost:4000/about/</code></p><h2 id="6-部署"><a href="#6-部署" class="headerlink" title="6. 部署"></a>6. 部署</h2><p>确认页面无误后，将其部署到线上：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo deploy</span><br></pre></td></tr></table></figure><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><ul><li><strong>主题支持</strong>: 页面样式和布局受主题的限制。确保你的主题支持自定义页面。</li><li><strong>多语言支持</strong>: 如果使用多语言站点，可根据需要在多语言文件夹中创建页面。</li></ul><p>通过上述步骤，你可以轻松创建并配置 Hexo 的独立页面！如果有更多需求，比如表单、动态内容，可以扩展为自定义插件或通过 HTML 实现。</p>]]></content>
    
    
    <summary type="html">Hexo next主题基本配置</summary>
    
    
    
    <category term="博客" scheme="https://idevv.us.kg/categories/%E5%8D%9A%E5%AE%A2/"/>
    
    
    <category term="Hexo" scheme="https://idevv.us.kg/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>Django ORM 基本用法教程</title>
    <link href="https://idevv.us.kg/2025/01/04/Django%20ORM%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/"/>
    <id>https://idevv.us.kg/2025/01/04/Django%20ORM%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/</id>
    <published>2025-01-04T15:26:52.000Z</published>
    <updated>2025-01-09T08:52:09.224Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Django-ORM-基本用法教程"><a href="#Django-ORM-基本用法教程" class="headerlink" title="Django ORM 基本用法教程"></a>Django ORM 基本用法教程</h1><p>Django ORM(对象关系映射)是Django框架中非常重要的一个组件,它让我们可以使用Python代码来操作数据库,而不需要写原生SQL语句。下面介绍Django ORM的基本用法:</p><h2 id="1-模型定义"><a href="#1-模型定义" class="headerlink" title="1. 模型定义"></a>1. 模型定义</h2><p>在Django中,我们通过定义Model类来创建数据库表:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Book</span>(models.Model):</span><br><span class="line">    title = models.CharField(max_length=<span class="number">100</span>)</span><br><span class="line">    author = models.CharField(max_length=<span class="number">50</span>)</span><br><span class="line">    price = models.DecimalField(max_digits=<span class="number">5</span>, decimal_places=<span class="number">2</span>)</span><br><span class="line">    publish_date = models.DateField()</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">str</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>.title</span><br></pre></td></tr></table></figure><h2 id="2-数据库操作"><a href="#2-数据库操作" class="headerlink" title="2. 数据库操作"></a>2. 数据库操作</h2><h3 id="2-1-创建记录"><a href="#2-1-创建记录" class="headerlink" title="2.1 创建记录"></a>2.1 创建记录</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">方法<span class="number">1</span></span><br><span class="line">book = Book(</span><br><span class="line">    title=<span class="string">&quot;Django实战&quot;</span>,</span><br><span class="line">    author=<span class="string">&quot;张三&quot;</span>,</span><br><span class="line">    price=<span class="number">59.9</span>,</span><br><span class="line">    publish_date=<span class="string">&quot;2024-01-01&quot;</span></span><br><span class="line">)</span><br><span class="line">book.save()</span><br><span class="line">方法<span class="number">2</span></span><br><span class="line">Book.objects.create(</span><br><span class="line">    title=<span class="string">&quot;Python入门&quot;</span>,</span><br><span class="line">    author=<span class="string">&quot;李四&quot;</span>,</span><br><span class="line">    price=<span class="number">45.5</span>,</span><br><span class="line">    publish_date=<span class="string">&quot;2024-02-01&quot;</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><h3 id="2-2-查询记录"><a href="#2-2-查询记录" class="headerlink" title="2.2 查询记录"></a>2.2 查询记录</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">获取所有记录</span><br><span class="line">books = Book.objects.<span class="built_in">all</span>()</span><br><span class="line">获取单条记录</span><br><span class="line">book = Book.objects.get(<span class="built_in">id</span>=<span class="number">1</span>)</span><br><span class="line">条件查询</span><br><span class="line">books = Book.objects.<span class="built_in">filter</span>(pricelt=<span class="number">50</span>) <span class="comment"># 价格小于50的图书</span></span><br><span class="line">books = Book.objects.<span class="built_in">filter</span>(titlecontains=<span class="string">&quot;Django&quot;</span>) <span class="comment"># 标题包含Django的图书</span></span><br><span class="line">排序</span><br><span class="line">books = Book.objects.order_by(<span class="string">&quot;-publish_date&quot;</span>) <span class="comment"># 按发布日期降序</span></span><br></pre></td></tr></table></figure><h3 id="2-3-更新记录"><a href="#2-3-更新记录" class="headerlink" title="2.3 更新记录"></a>2.3 更新记录</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">方法<span class="number">1</span>：更新单个对象</span><br><span class="line">book = Book.objects.get(<span class="built_in">id</span>=<span class="number">1</span>)</span><br><span class="line">book.price = <span class="number">69.9</span></span><br><span class="line">book.save()</span><br><span class="line">方法<span class="number">2</span>：批量更新</span><br><span class="line">Book.objects.<span class="built_in">filter</span>(author=<span class="string">&quot;张三&quot;</span>).update(price=<span class="number">79.9</span>)</span><br></pre></td></tr></table></figure><h3 id="2-4-删除记录"><a href="#2-4-删除记录" class="headerlink" title="2.4 删除记录"></a>2.4 删除记录</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">删除单个记录</span><br><span class="line">book = Book.objects.get(<span class="built_in">id</span>=<span class="number">1</span>)</span><br><span class="line">book.delete()</span><br><span class="line">批量删除</span><br><span class="line">Book.objects.<span class="built_in">filter</span>(pricelt=<span class="number">30</span>).delete()</span><br></pre></td></tr></table></figure><h2 id="3-高级查询"><a href="#3-高级查询" class="headerlink" title="3. 高级查询"></a>3. 高级查询</h2><h3 id="3-1-聚合查询"><a href="#3-1-聚合查询" class="headerlink" title="3.1 聚合查询"></a>3.1 聚合查询</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db.models <span class="keyword">import</span> Avg, Max, Min, Count</span><br><span class="line">计算平均价格</span><br><span class="line">avg_price = Book.objects.aggregate(Avg(<span class="string">&#x27;price&#x27;</span>))</span><br><span class="line">统计每个作者的图书数量</span><br><span class="line">author_count = Book.objects.values(<span class="string">&#x27;author&#x27;</span>).annotate(book_count=Count(<span class="string">&#x27;id&#x27;</span>))</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="3-2-F对象和Q对象"><a href="#3-2-F对象和Q对象" class="headerlink" title="3.2 F对象和Q对象"></a>3.2 F对象和Q对象</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db.models <span class="keyword">import</span> F, Q</span><br><span class="line">F对象：字段之间的比较</span><br><span class="line">Book.objects.<span class="built_in">filter</span>(salesgt=F(<span class="string">&#x27;stock&#x27;</span>)) <span class="comment"># 销量大于库存的图书</span></span><br><span class="line">    Q对象：复杂查询条件</span><br><span class="line">    Book.objects.<span class="built_in">filter</span>(</span><br><span class="line">    Q(pricelt=<span class="number">50</span>) | Q(author=<span class="string">&quot;张三&quot;</span>) <span class="comment"># 价格小于50或作者为张三的图书</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><h2 id="4-关联查询"><a href="#4-关联查询" class="headerlink" title="4. 关联查询"></a>4. 关联查询</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">定义关联模型</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Author</span>(models.Model):</span><br><span class="line">    name = models.CharField(max_length=<span class="number">50</span>)</span><br><span class="line">    email = models.EmailField()</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Book</span>(models.Model):</span><br><span class="line">    title = models.CharField(max_length=<span class="number">100</span>)</span><br><span class="line">    author = models.ForeignKey(Author, on_delete=models.CASCADE)</span><br><span class="line">    关联查询</span><br><span class="line">    查询作者的所有图书</span><br><span class="line">    author = Author.objects.get(<span class="built_in">id</span>=<span class="number">1</span>)</span><br><span class="line">    books = author.book_set.<span class="built_in">all</span>()</span><br><span class="line">    查询图书的作者信息</span><br><span class="line">    book = Book.objects.get(<span class="built_in">id</span>=<span class="number">1</span>)</span><br><span class="line">    author = book.author</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>Django ORM提供了丰富的API来操作数据库，使得数据库操作变得简单直观。上面介绍的只是一些基础用法，Django ORM还有更多高级特性等待你去探索。在实际开发中，建议：</p><ol><li>合理使用查询优化方法，如select_related()和prefetch_related()</li><li>注意查询性能，避免N+1查询问题</li><li>适当使用数据库索引</li><li>对于复杂查询，可以考虑使用原生SQL</li></ol>]]></content>
    
    
    <summary type="html">Django ORM 基本用法教程</summary>
    
    
    
    <category term="Python开发" scheme="https://idevv.us.kg/categories/Python%E5%BC%80%E5%8F%91/"/>
    
    
    <category term="Django" scheme="https://idevv.us.kg/tags/Django/"/>
    
  </entry>
  
</feed>
